#include "MyLSP.h"
#include "debug.h"
#include "utils.h"
#include <ws2tcpip.h>

//DWORD GetInformation()
//{
//	HKEY hKey = 0;
//	DWORD Count = 0, keyType = REG_SZ, i, j, k;
//	DWORD len = sizeof(DWORD);
//	char lpName[30], lpValue[30];
//	DWORD lpNameLen, lpValueLen;
//
//	char ipName[30], ipValue[30];
//	unsigned short portName, portValue;
//
//	lpNameLen = sizeof(lpName);
//	lpValueLen = sizeof(lpValue);
//
//	lanjie = 0;
//
//	if (RegOpenKeyExA(HKEY_LOCAL_MACHINE,"SYSTEM\\CurrentControlSet\\Control\\LSPManager",0, KEY_ALL_ACCESS, &hKey)!= ERROR_SUCCESS)
//	{
//		return 0;
//	}
//	RegQueryValueExA(hKey, "NumberOfRules", 0, &keyType, (BYTE*)&Count, &len);
//	if (Count == 0)
//	{
//		RegCloseKey(hKey);
//		return 0;
//	}
//	for (i=0; i<=Count; i++)
//	{
//		memset(lpName, 0, sizeof(lpName));
//		memset(lpValue,0, sizeof(lpValue));
//		memset(ipName,0, sizeof(ipName));
//		memset(ipValue,0, sizeof(ipValue));
//		lpNameLen = sizeof(lpName);
//		lpValueLen = sizeof(lpValue);
//		portName = portValue = 0;
//		RegEnumValueA(hKey, i, lpName, &lpNameLen, NULL, &keyType, (unsigned char*)lpValue, &lpValueLen);
//		if (strcmp(lpName, "NumberOfRules") == 0) continue;
//		k = 0;
//		for (j=0; lpName[j]!=':'; j++)
//		{
//			ipName[k++] = lpName[j];
//		}
//		j++;
//		k=0;
//		for (j; j<strlen(lpName); j++)
//		{
//			if (lpName[j] == '*')
//			{
//				portName = 0;
//				break;
//			}
//			portName = portName*10 + lpName[j] - '0';
//		}
//
//		k = 0;
//		for (j=0; lpValue[j]!=':'; j++)
//		{
//			ipValue[k++] = lpValue[j];
//		}
//		j++;
//		k=0;
//		for (j; j<strlen(lpValue); j++)
//		{
//			portValue = portValue*10 + lpValue[j] - '0';
//		}
//		if (strlen(ipName) <=5 )
//		{
//			if (portName == 0 ||  nowPort == portName)
//			{
//				lanjie = 1;
//				ChangedPort = portValue;
//				strcpy_s(ChangedIP, ipValue);
//			} else
//			{
//				lanjie = 0;
//			}
//		} else
//		{
//			if (strcmp(ipName, NowIP) == 0)
//			{
//				if (portName == 0 ||  nowPort == portName)
//				{
//					lanjie = 1;
//					ChangedPort = portValue;
//					strcpy_s(ChangedIP, ipValue);
//				} else
//				{
//					lanjie = 0;
//				}
//			} else
//			{
//				lanjie = 0;
//			}
//		}
//		if (lanjie) break;
//	}
//	RegCloseKey(hKey);
//	return 0;
//}

void ReplaceSubstrings(std::string& str, const std::string& from, const std::string& to) {
	if (from.empty()) return; // 防止空子字符串导致的无限循环
	size_t start_pos = 0;
	while ((start_pos = str.find(from, start_pos)) != std::string::npos) {
		str.replace(start_pos, from.length(), to);
		start_pos += to.length(); // 从替换后的位置继续搜索
	}
}

void DumpBuffer(LPCSTR szPrefix, SOCKET s, LPWSABUF lpBuffers, size_t dumplen, BOOL bIsSend)
{
	sockaddr_in addr;
	memset(&addr, 0, sizeof(addr));
	int addrlen = sizeof(addr);
	getpeername(s, (sockaddr*)&addr, &addrlen);
	u_short port = ntohs(addr.sin_port);
	char ipaddr[64];
	inet_ntop(addr.sin_family, &addr.sin_addr, ipaddr, sizeof(ipaddr));

	const int len = min(lpBuffers->len, dumplen);
	auto hexstr = arrayToHexString((LPBYTE)lpBuffers->buf, len);
	auto dumpstr = std::string(lpBuffers->buf, len);
	ReplaceSubstrings(dumpstr, "\n", "\\n");

	if (lpBuffers->len >= 25 && lpBuffers->buf[0] == '#') {

		const size_t head_len = 22;
		
		int skip = 1;
		if (bIsSend) {
			if (lpBuffers->buf[1] >= '1' && lpBuffers->buf[1] <= '9')
				skip = 2;
		}

		auto head = Decode6BitBuf(std::string(lpBuffers->buf + skip, lpBuffers->buf + skip + head_len - 1));
		auto body = Decode6BitBuf(std::string(lpBuffers->buf + skip + head_len, lpBuffers->buf + len - 1));
		auto body_str = std::string(body.begin(), body.end());
		auto head_str = arrayToHexString(head.data(), head.size());
		uint8_t* head_data = head.data();
		WORD tag = MAKEWORD(head_data[8], head_data[9]);
		TRACE("%s: [%s, %d] lpBuffers->buf = [%s] H(%d):{%s} B:{%s} {%s}\n", szPrefix, ipaddr,
			port, dumpstr.c_str(), tag, head_str.c_str(), body_str.c_str(), hexstr.c_str());
	} else {
		TRACE("%s: [%s, %d] lpBuffers->buf = [%s] {%s}\n", szPrefix, ipaddr,
			port, dumpstr.c_str(), hexstr.c_str());
	}
}

SOCKET
WSPAPI  WSPAccept(
	SOCKET s,
	struct sockaddr FAR * addr,
	LPINT addrlen,
	LPCONDITIONPROC lpfnCondition,
	DWORD_PTR dwCallbackData,
	LPINT lpErrno )
{
	//sockaddr_in *ConnectAddress = (sockaddr_in*)addr;
	// ODS(L"WSPAccept() Enter!");
	return g_NextProcTable.lpWSPAccept(s, addr, addrlen, lpfnCondition, dwCallbackData, lpErrno);
}

INT
WSPAPI WSPAddressToString(
						  LPSOCKADDR lpsaAddress,
						  DWORD dwAddressLength,
						  LPWSAPROTOCOL_INFOW lpProtocolInfo,
						  LPWSTR lpszAddressString,
						  LPDWORD lpdwAddressStringLength,
						  LPINT lpErrno
						  )
{
	// ODS(L"WSPAddressToString() Enter!");
	return g_NextProcTable.lpWSPAddressToString(lpsaAddress,
		dwAddressLength,
		lpProtocolInfo,
		lpszAddressString,
		lpdwAddressStringLength,
		lpErrno);
}

int
WSPAPI WSPAsyncSelect(
					  SOCKET s,
					  HWND hWnd,
					  unsigned int wMsg,
					  long lEvent,
					  LPINT lpErrno
					  )
{
	// ODS(L"WSPAsyncSelect() Enter!");
	return g_NextProcTable.lpWSPAsyncSelect(
		s,
		hWnd,
		wMsg,
		lEvent,
		lpErrno);
}

int
WSPAPI WSPBind(
			   SOCKET s,
			   const struct sockaddr FAR * name,
			   int namelen,
			   LPINT lpErrno
			   )
{
	// ODS(L"WSPBind() Enter!");
	//sockaddr_in *ConnectAddress = (sockaddr_in*)name;
	return g_NextProcTable.lpWSPBind(s, name, namelen, lpErrno);
}

int
WSPAPI WSPCancelBlockingCall(
							 LPINT lpErrno
							 )
{
	// ODS(L"WSPCancelBlockingCall() Enter!");
	return g_NextProcTable.lpWSPCancelBlockingCall(
		lpErrno);
}


int
WSPAPI WSPCleanup(
				  LPINT lpErrno
				  )
{
	// ODS(L"WSPCleanup() Enter!");
	return g_NextProcTable.lpWSPCleanup(
		lpErrno);
}

int
WSPAPI WSPCloseSocket(
					  SOCKET s,
					  LPINT lpErrno
					  )
{
	// ODS(L"WSPCloseSocket() Enter!");
	return g_NextProcTable.lpWSPCloseSocket(s, lpErrno);
}

int
WSPAPI WSPConnect(
				  SOCKET s,
				  const struct sockaddr FAR * name,
				  int namelen,
				  LPWSABUF lpCallerData,
				  LPWSABUF lpCalleeData,
				  LPQOS lpSQOS,
				  LPQOS lpGQOS,
				  LPINT lpErrno
				  )
{
	// ODS(L"WSPConnect() Enter!");
	/*WCHAR temp[1024];
	sockaddr_in *ConnectAddress = (sockaddr_in*)name;
	// ODS(L"WSPConnect() Enter!");
	_stprintf_s(temp, L"Connect to  %s:%d\n", inet_ntoa(ConnectAddress->sin_addr), ntohs(ConnectAddress->sin_port));
	// ODS(temp);

	strcpy_s(NowIP,inet_ntoa(ConnectAddress->sin_addr));
	nowPort = ntohs(ConnectAddress->sin_port);
	GetInformation();

	// ODS(L"After GetInformation!\n")
	if (lanjie == 0)
	{
		return g_NextProcTable.lpWSPConnect(s,
			name,
			namelen,
			lpCallerData,
			lpCalleeData,
			lpSQOS,
			lpGQOS,
			lpErrno);
	}
	// ODS(L"lanjie begin");
	((sockaddr_in*)name)->sin_addr.S_un.S_addr = inet_addr(ChangedIP);
	((sockaddr_in*)name)->sin_port = htons(ChangedPort);
	_stprintf_s(temp, L"After change!Connect to  %s:%d\n", inet_ntoa(((sockaddr_in*)name)->sin_addr), ntohs(ConnectAddress->sin_port));
	// ODS(temp);*/
	return g_NextProcTable.lpWSPConnect(s,
		name,
		namelen,
		lpCallerData,
		lpCalleeData,
		lpSQOS,
		lpGQOS,
		lpErrno);
}

int
WSPAPI WSPDuplicateSocket(
						  SOCKET s,
						  DWORD dwProcessId,
						  LPWSAPROTOCOL_INFOW lpProtocolInfo,
						  LPINT lpErrno
						  )
{
	// ODS(L"WSPDuplicateSocket() Enter!");
	return g_NextProcTable.lpWSPDuplicateSocket(
		s,
		dwProcessId,
		lpProtocolInfo,
		lpErrno);
}

int
WSPAPI WSPEnumNetworkEvents(
							SOCKET s,
							WSAEVENT hEventObject,
							LPWSANETWORKEVENTS lpNetworkEvents,
							LPINT lpErrno
							)
{
	// ODS(L"WSPEnumNetworkEvents() Enter!");
	return g_NextProcTable.lpWSPEnumNetworkEvents(
		s,
		hEventObject,
		lpNetworkEvents,
		lpErrno);
}

int
WSPAPI WSPEventSelect(
					  SOCKET s,
					  WSAEVENT hEventObject,
					  long lNetworkEvents,
					  LPINT lpErrno
					  )
{
	// ODS(L"WSPEventSelect() Enter!");
	return g_NextProcTable.lpWSPEventSelect(
		s,
		hEventObject,
		lNetworkEvents,
		lpErrno);
}

BOOL
WSPAPI WSPGetOverlappedResult(
							  SOCKET s,
							  LPWSAOVERLAPPED lpOverlapped,
							  LPDWORD lpcbTransfer,
							  BOOL fWait,
							  LPDWORD lpdwFlags,
							  LPINT lpErrno
							  )
{
	// ODS(L"WSPGetOverlappedResult() Enter!");

	return g_NextProcTable.lpWSPGetOverlappedResult(
		s,
		lpOverlapped,
		lpcbTransfer,
		fWait,
		lpdwFlags,
		lpErrno);
}

int
WSPAPI WSPGetPeerName(
					  SOCKET s,
struct sockaddr FAR * name,
	LPINT namelen,
	LPINT lpErrno
	)
{
	// ODS(L"WSPGetPeerName() Enter!");

	return g_NextProcTable.lpWSPGetPeerName(
		s,
		name,
		namelen,
		lpErrno);
}

int
WSPAPI WSPGetSockName(
					  SOCKET s,
struct sockaddr FAR * name,
	LPINT namelen,
	LPINT lpErrno
	)
{
	// ODS(L"WSPGetSockName() Enter!");
	return g_NextProcTable.lpWSPGetSockName(
		s,
		name,
		namelen,
		lpErrno);
}

int
WSPAPI WSPGetSockOpt(
					 SOCKET s,
					 int level,
					 int optname,
					 char FAR * optval,
					 LPINT optlen,
					 LPINT lpErrno
					 )
{
	// ODS(L"WSPGetSockOpt() Enter!");
	return g_NextProcTable.lpWSPGetSockOpt(
		s,
		level,
		optname,
		optval,
		optlen,
		lpErrno
		);
}

BOOL
WSPAPI WSPGetQOSByName(
					   SOCKET s,
					   LPWSABUF lpQOSName,
					   LPQOS lpQOS,
					   LPINT lpErrno
					   )
{
	// ODS(L"WSPGetQOSByName() Enter!");
	return g_NextProcTable.lpWSPGetQOSByName(
		s,
		lpQOSName,
		lpQOS,
		lpErrno);
}

int
WSPAPI WSPIoctl(
				SOCKET s,
				DWORD dwIoControlCode,
				LPVOID lpvInBuffer,
				DWORD cbInBuffer,
				LPVOID lpvOutBuffer,
				DWORD cbOutBuffer,
				LPDWORD lpcbBytesReturned,
				LPWSAOVERLAPPED lpOverlapped,
				LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine,
				LPWSATHREADID lpThreadId,
				LPINT lpErrno
				)
{
	// ODS(L"WSPIoctl Called!\n");
	return g_NextProcTable.lpWSPIoctl(
		s,
		dwIoControlCode,
		lpvInBuffer,
		cbInBuffer,
		lpvOutBuffer,
		cbOutBuffer,
		lpcbBytesReturned,
		lpOverlapped,
		lpCompletionRoutine,
		lpThreadId,
		lpErrno);
}

SOCKET
WSPAPI WSPJoinLeaf(
				   SOCKET s,
				   const struct sockaddr FAR * name,
				   int namelen,
				   LPWSABUF lpCallerData,
				   LPWSABUF lpCalleeData,
				   LPQOS lpSQOS,
				   LPQOS lpGQOS,
				   DWORD dwFlags,
				   LPINT lpErrno
				   )
{
	// ODS(L"WSPJoinLeaf CALLED\n");
	return g_NextProcTable.lpWSPJoinLeaf(
		s,
		name,
		namelen,
		lpCallerData,
		lpCalleeData,
		lpSQOS,
		lpGQOS,
		dwFlags,
		lpErrno);
}

int
WSPAPI WSPListen(
				 SOCKET s,
				 int backlog,
				 LPINT lpErrno
				 )
{
	// ODS(L"WSPListen() Enter!\n");
	return g_NextProcTable.lpWSPListen(
		s,
		backlog,
		lpErrno);
}

int g_step = 0;

int BeforeRecvFilter(SOCKET s,
	LPWSABUF lpBuffers,
	DWORD dwBufferCount,
	LPDWORD lpNumberOfBytesRecvd,
	LPDWORD lpFlags,
	LPWSAOVERLAPPED lpOverlapped,
	LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine,
	LPWSATHREADID lpThreadId,
	LPINT lpErrno, 
	LPBOOL lpCont)
{
	return NO_ERROR;
}

int AfterRecvFilter(SOCKET s,
	LPWSABUF lpBuffers,
	DWORD dwBufferCount,
	LPDWORD lpNumberOfBytesRecvd,
	LPDWORD lpFlags,
	LPWSAOVERLAPPED lpOverlapped,
	LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine,
	LPWSATHREADID lpThreadId,
	LPINT lpErrno, 
	int iNextRetutn)
{
	//const int tlen = min(lpBuffers->len, 32);
	//auto str = arrayToHexString((LPBYTE)lpBuffers->buf, tlen);
	//TRACE("AfterRecvFilter(): lpBuffers->buf = [%s]{%s}\n", std::string(lpBuffers->buf, tlen).c_str(), str.c_str());
	DumpBuffer("AfterRecvFilter()", s, lpBuffers, 64, FALSE);
	//return iNextRetutn;

	BYTE desthead[] = { 0x55, 0xaa, 0x55, 0xaa };

	/*unsigned char fake_pkt[] = {
		0x55, 0xaa, 0x55, 0xaa, 0x39, 0x9c, 0x68, 0xbd, 0x01, 0x00, 0x38, 0x00, 0x00, 0x00, 0x23, 0x65,
		0x46, 0x61, 0x77, 0x4a, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3d, 0x60, 0x3d, 0x68, 0x52, 0x75, 0x52,
		0x3d, 0x3d, 0x7b, 0x3d, 0x6c, 0x54, 0x5f, 0x41, 0x62, 0x51, 0x4f, 0x55, 0x4e, 0x59, 0x72, 0x5d,
		0x41, 0x59, 0x60, 0x4d, 0x6e, 0x56, 0x51, 0x51, 0x6b, 0x48, 0x5f, 0x40, 0x71, 0x47, 0x73, 0x59,
		0x65, 0x4c, 0x4f, 0x70, 0x79, 0x21
	};*/

	BYTE pkt2[] = { 0x55, 0xaa, 0x55, 0xaa, 0x39, 0x9c, 0x68, 0xbd, 0x1, 0x0, 0x38, 0x0, 0x0, 0x0, 0x23, 0x65, 0x46, 0x61, 0x77, 0x4a, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3d, 0x60, 0x3d, 0x68, 0x52, 0x75, 0x52, 0x3d, 0x3d, 0x7b, 0x3d, 0x6c, 0x54, 0x5f, 0x41, 0x62, 0x51, 0x4f, 0x55, 0x4e, 0x59, 0x72, 0x5d, 0x41, 0x59, 0x60, 0x4d, 0x6e, 0x56, 0x51, 0x51, 0x6b, 0x48, 0x5f, 0x40, 0x71, 0x47, 0x73, 0x59, 0x65, 0x4c, 0x4f, 0x70, 0x79, 0x21, };

	BYTE pkt4[] = { 0x55, 0xaa, 0x55, 0xaa, 0x68, 0x81, 0x2f, 0x4f, 0x2, 0x0, 0x9e, 0x6, 0x0, 0x0, 0x78, 0x9c, 0xed, 0x57, 0xcb, 0xb2, 0xa3, 0xc8, 0x11, 0xfd, 0x96, 0x89, 0xf9, 0x81, 0x69, 0xaf, 0x8b, 0x37, 0x48, 0x20, 0x5e, 0x55, 0x5c, 0x9e, 0x12, 0x88, 0x97, 0x90, 0x40, 0xbc, 0x5f, 0x92, 0x10, 0xfe, 0x1d, 0x7f, 0x80, 0xb7, 0x9e, 0xd5, 0x2c, 0x1c, 0xde, 0xfa, 0x53, 0xbc, 0xb4, 0xbd, 0x32, 0xd2, 0xed, 0x76, 0xf7, 0x8d, 0xdb, 0xbe, 0xe, 0x2f, 0x6d, 0xcf, 0x51, 0x84, 0xb2, 0x2a, 0xf3, 0x50, 0x59, 0x5, 0x99, 0x91, 0x59, 0x3f, 0x42, 0x50, 0xfa, 0x54, 0x1, 0x1e, 0x48, 0x31, 0xe9, 0x29, 0x31, 0x0, 0x7e, 0xf8, 0x11, 0xbc, 0xea, 0x16, 0x10, 0x1d, 0x66, 0xdf, 0x80, 0xe, 0xf8, 0x65, 0xbc, 0xe5, 0x4a, 0xab, 0xe4, 0x73, 0x50, 0xf0, 0xf6, 0x42, 0xcb, 0x74, 0x5a, 0xf6, 0xf4, 0x8e, 0x1c, 0xa, 0x9e, 0x19, 0x0, 0x9f, 0x79, 0x3a, 0xe5, 0x83, 0x62, 0x73, 0xc2, 0x31, 0x1a, 0xf,
0x78, 0x5f, 0xbc, 0x63, 0x80, 0x83, 0x25, 0x50, 0x7c, 0xaa, 0x4, 0x58, 0xb0, 0x6, 0x64, 0x75, 0xc6, 0xbc, 0xb, 0xb, 0x4a, 0xba, 0x5e, 0x4, 0xed, 0xbb, 0xc4, 0x5a, 0x7c, 0xc9, 0xc5, 0x9, 0x1b, 0x2, 0x77, 0x2f, 0x21, 0xf, 0x27, 0x22, 0xa7, 0x61, 0x59, 0x17, 0x34, 0x51, 0x41, 0x46, 0x7b, 0x78, 0x95, 0x55, 0x9f, 0x64, 0x4f, 0xac, 0x46, 0xd5, 0x5, 0x8c, 0x4c, 0xd1, 0x3d, 0xf0, 0xa4, 0x48, 0x24, 0x3, 0x30, 0x8c, 0xd9, 0xb5, 0x75, 0xd6, 0xa4, 0xeb, 0x12, 0x2d, 0xfa, 0x3d, 0xa0, 0x79, 0xbe, 0xdc, 0x51, 0xfe, 0x70, 0xd8, 0x50, 0x7e, 0x21, 0xb1, 0x42, 0x5c, 0xc, 0x9a, 0x29, 0xfa, 0xb6, 0xce, 0x93, 0x86, 0xe8, 0x1d, 0xd3, 0x46, 0xc4, 0x4b, 0x5d, 0xd7, 0x68, 0x62, 0x70, 0x4b, 0x86, 0xe7, 0x19, 0xb0, 0x8c, 0xb0, 0x6, 0x2e, 0xc7, 0xfc, 0xa, 0x7, 0x73, 0xbf, 0xc, 0xbf, 0xd5, 0x63, 0xf3, 0xf7, 0xf5, 0x44, 0xfb, 0xf9, 0x75, 0xbd, 0x1, 0xb, 0x98, 0x7, 0x1b,
0x7f, 0xfc, 0x11, 0xe3, 0x5c, 0xe, 0xf, 0xd9, 0x80, 0x7, 0xd3, 0x5, 0xdb, 0x7, 0x63, 0xf5, 0x8e, 0x7, 0x70, 0x80, 0x3d, 0x78, 0xe0, 0xf0, 0x34, 0xbd, 0xe1, 0x51, 0x4f, 0x1f, 0x37, 0xf7, 0xd5, 0x7b, 0x21, 0x4e, 0x29, 0xf9, 0xd4, 0xe0, 0x3b, 0xc, 0x7c, 0xf9, 0x58, 0xb8, 0x95, 0xeb, 0x8d, 0x79, 0x5a, 0x9d, 0x9a, 0xb2, 0xe3, 0xbf, 0xb3, 0xa7, 0xaf, 0x88, 0xae, 0x9d, 0x40, 0x1f, 0xab, 0xe3, 0xc4, 0x3b, 0x3e, 0xf9, 0x11, 0x71, 0x7e, 0x5d, 0xf9, 0x33, 0x9c, 0x81, 0x58, 0xa6, 0x52, 0x51, 0xbc, 0xe1, 0x3c, 0xed, 0x2c, 0xf9, 0xdc, 0x39, 0xb8, 0x4b, 0xf0, 0xa3, 0xf5, 0x7e, 0xc5, 0x7f, 0x37, 0x70, 0xec, 0xc4, 0xb0, 0xe5, 0xd9, 0x5a, 0x1d, 0x3e, 0x8c, 0xaf, 0x25, 0x28, 0x9a, 0x51, 0x92, 0x26, 0x8b, 0x6e, 0x37, 0xc5, 0x87, 0x3c, 0x7c, 0x4d, 0x8, 0xc5, 0xaa, 0x2b, 0x6a, 0x1b, 0xcf, 0x3e, 0xe2, 0x91, 0x35, 0x5b, 0xf0, 0xbe, 0x94, 0xf1, 0x4, 0xcc, 0x78, 0x95, 0x75, 0x79, 0x15, 0x5c, 0x78, 0x1f, 0x5e, 0xf8, 0x9a, 0x7f, 0xc7, 0x9d, 0xe7, 0xdb, 0x87, 0xf3, 0xff, 0x0, 0xaf, 0xb1, 0xff, 0x3c, 0xc2, 0x33, 0x4f, 0x88, 0xe7, 0xfc, 0x79, 0xf6, 0x87, 0x5f, 0x4c, 0xd6, 0x5c, 0x12, 0x40, 0x7e, 0x19, 0x53, 0xc4, 0xc3, 0xf6, 0x2f, 0x53, 0x33, 0xb5, 0x50, 0x6d, 0xee, 0xaf, 0x1d, 0x7f, 0x42, 0xf5, 0xfd, 0xa3, 0x77, 0x77, 0xa2, 0x5b, 0xbb, 0x3b, 0x9c, 0x27, 0x7f, 0xd5, 0xda, 0x73, 0xf0, 0x1, 0x11, 0x5f, 0xb6, 0x81, 0x3d, 0xdc, 0x3f, 0x1, 0x87, 0xc7, 0xa0, 0x70, 0xbe, 0xb3, 0xf4, 0x73, 0x7b, 0xb, 0xe6, 0xe2, 0xd7, 0xd4, 0xfc, 0x1f, 0xc6, 0xff, 0x5b, 0x6a, 0xfe, 0x1b, 0x60, 0xca, 0x23, 0x37, 0x78, 0x66, 0x89, 0x79, 0x2, 0x6b, 0xc1, 0xb3, 0x66, 0x7f, 0x7d, 0x31, 0xd9, 0xd7, 0x9a, 0xfd, 0xa6, 0xf6, 0xcb, 0xd8, 0x97, 0x84, 0x7a, 0xaf, 0xc7, 0xbe, 0xa3, 0x2f, 0x1f, 0x9, 0x47, 0xb9, 0xaf, 0x7a, 0xd6, 0xfd, 0x46, 0xaf, 0x48, 0x60, 0x69, 0xa7, 0x7c, 0x0, 0x3e, 0xbd, 0x7f, 0x80, 0x79, 0x3a, 0x27, 0xa4, 0xdb, 0x1d, 0x74, 0x2c, 0xb3, 0xec, 0x75, 0x88, 0x99, 0xe, 0xd6, 0x30, 0xb5, 0x24, 0xd9, 0x5f, 0x7a, 0x19, 0x91, 0x9d, 0x27, 0x72, 0x9b, 0x9e, 0x6b, 0x32, 0xd9, 0x1c, 0xcb, 0xb0, 0xd9, 0x27, 0x21, 0x24, 0x92, 0xc4, 0x72, 0xa8, 0xb6, 0xf6, 0x74, 0xe7, 0x22, 0x72, 0xe9, 0xc9, 0xa, 0xf2, 0x22, 0x28, 0x21, 0x48, 0x4, 0x69, 0xd3, 0x32, 0xe1, 0xa, 0x20, 0x5, 0xc9, 0x47, 0x31, 0xf0, 0x14, 0x51, 0xdc, 0x29, 0xee, 0xa4, 0xda, 0x66, 0xc0, 0x24, 0x57, 0xbe, 0x86, 0x35, 0x6d, 0x45, 0x3d, 0xca, 0xa2, 0x5d, 0x3a, 0x5f, 0xf3, 0xe0, 0xbe, 0x8d, 0x8d, 0xe8, 0x36,
0x9a, 0x83, 0x54, 0xd5, 0x4c, 0xd5, 0xc6, 0x87, 0x1b, 0x3a, 0x29, 0xfd, 0x7e, 0xb, 0x2f, 0x77, 0xd, 0xfa, 0x74, 0x55, 0xd5, 0x5a, 0x1d, 0xe5, 0x3a, 0x6e, 0xb, 0xf1, 0xb5, 0xe2, 0xca, 0xb2, 0xb2, 0x46, 0xa2, 0x5e,
0xf, 0x32, 0x7b, 0x9e, 0xae, 0xad, 0xc0, 0x1e, 0xe7, 0x5d, 0x10, 0x22, 0xf1, 0xe5, 0x38, 0x49, 0xb9, 0x76, 0x53, 0xf3, 0x70, 0x5f, 0xed, 0xd4, 0xdd, 0x7c, 0xf1, 0xe2, 0xfc, 0x85, 0xf2, 0xea, 0xdc, 0x66, 0xcd, 0x46, 0xdd, 0x11, 0xcd, 0xd4, 0x93, 0xa5, 0xcb, 0x65, 0x61, 0x9f, 0x67, 0x37, 0xe9, 0xb2, 0xde, 0x8f, 0x31, 0xaf, 0x4c, 0x74, 0x6a, 0x62, 0x28, 0xd3, 0x4e, 0x99, 0x77, 0xdf, 0xdc, 0xf, 0x8d, 0xbc, 0x3d, 0xf3, 0x75, 0xbe, 0xc6, 0x51, 0xd8, 0x31, 0xbb, 0xcb, 0x69, 0x9e, 0xfb, 0xa, 0xf6, 0x3d, 0x53, 0x11, 0xe3, 0xa4, 0xe6, 0x4b, 0x4f, 0x59, 0x5b, 0xbb, 0xb5, 0x82, 0x56, 0xbe, 0x23, 0x12, 0xd1, 0xcd, 0x12, 0x1a, 0xe7, 0x5e, 0x2b,
0xa7, 0x2d, 0x3e, 0x1d, 0xaf, 0x45, 0xa9, 0x79, 0xf0, 0xd8, 0xdf, 0xef, 0x77, 0x81, 0x4e, 0xca, 0x88, 0x57, 0xb3, 0x3c, 0x65, 0x8c, 0x83, 0x3d, 0xeb, 0x3b, 0xeb, 0x4a, 0x47, 0x6, 0x73, 0xae, 0xb1, 0x93, 0x9c, 0x16, 0x57, 0x9a, 0xa7, 0x53, 0xa7, 0xac, 0xbd, 0xb4, 0xa8, 0x6a, 0x17, 0x71, 0x2f, 0xf9, 0xbd, 0x85, 0x9, 0x55, 0x29, 0xdb, 0xd4, 0xa8, 0x80, 0xec, 0xaf, 0x31, 0xd, 0xa4, 0xd4, 0x80, 0x97, 0x2f, 0x80, 0xd0, 0x7c, 0xce, 0x67, 0x6c, 0x97, 0xd4, 0xab, 0xe2, 0xa5, 0xd2, 0x74, 0xcb, 0x90, 0x56, 0xf1, 0x49, 0x90, 0xae, 0x9d, 0xd6, 0x3a, 0xbb, 0xf5, 0xed, 0x76, 0x87, 0x3e, 0xeb, 0x7, 0x73, 0x7b, 0xdd, 0xeb, 0x4a, 0x65, 0x9, 0x2d, 0xc7, 0x9, 0x4a, 0x76, 0x33, 0xdb, 0x5d, 0xd0, 0x72, 0x9b, 0x8b, 0x1c, 0xae, 0xe9, 0x65, 0x2d, 0x43, 0xc7, 0xcb, 0x10, 0x30, 0x34, 0x74, 0xd, 0x9d, 0xef, 0xd8, 0xad, 0x52, 0x86, 0xee, 0x9a, 0x7e, 0x61, 0x8d, 0x32, 0x8c, 0xc0, 0x5, 0x9e, 0xef, 0x60, 0x8d, 0xcd, 0x47, 0xf1, 0xdc, 0x6b, 0xa2, 0xd3, 0x76, 0x4c, 0x9a, 0x80, 0x63, 0xbd, 0x9e, 0x6c, 0xd9, 0x2, 0xfb, 0x7a, 0xa, 0x3d, 0xcf, 0x85, 0x33, 0xb7, 0x9f, 0xd9, 0x1d, 0x87, 0x4f, 0x97, 0xf2, 0xd4, 0x0, 0xb, 0xb8, 0xf5, 0x35, 0x40, 0x1e, 0x51, 0x39, 0x9c, 0x62, 0xd6, 0xd7, 0x97, 0x78, 0xc6, 0xcb, 0xf5, 0x65, 0x2f, 0xce, 0x53, 0x7b, 0xf, 0xe8, 0x98, 0x9a, 0x73, 0xaf, 0xda, 0xae, 0x32, 0x93, 0x9d, 0xbd, 0xe9, 0x32, 0x4c, 0x28, 0xbb, 0x5f, 0xe7, 0xde, 0xe1, 0x5a, 0x3a, 0xce, 0x23, 0xd3, 0x57, 0x7b, 0xb7, 0x94, 0x93, 0xba, 0x19, 0xf, 0xfb, 0x2b, 0x79, 0xe1, 0xf8, 0xad, 0x7d, 0x0, 0x85, 0x9c, 0x86, 0x23, 0x79, 0x27, 0x3, 0x3e, 0xa3, 0x6e, 0x74, 0xc4, 0xa8, 0x32, 0xad, 0xdf, 0xa8, 0xe4, 0xa0, 0x99, 0xb4, 0x79, 0xf0, 0xb0, 0x15, 0x14, 0xd2, 0x8e, 0x93, 0x4f, 0xa7, 0x9d, 0x9, 0x2e, 0xe1, 0x18, 0xd4, 0x8d, 0x47, 0x1e, 0x94, 0x88, 0xcc, 0xa, 0x96, 0xc, 0x85, 0xcc, 0x26, 0x93, 0x3e, 0xb2, 0xab, 0x8b, 0x37, 0x11, 0x69, 0x8f, 0x6f, 0xde, 0xc7, 0xb6, 0xfd, 0x4c, 0x82, 0x9f, 0x7e, 0xfb, 0xfa, 0xfb, 0xfd, 0xdf, 0xfe, 0xfc, 0xbb, 0x9f, 0xff, 0xf2, 0xcb, 0xdf, 0x3f, 0xfd, 0xe6, 0xf, 0x7f, 0xfc, 0xe9, 0xd3, 0x9f, 0xfe, 0xfa, 0x9e, 0xef, 0x80, 0x7f, 0xe6, 0x42, 0xf9, 0x2c, 0xa9, 0x43, 0x4c, 0x6c, 0xe, 0xbc, 0xe9, 0x96, 0x98, 0xb6, 0x22, 0xe8, 0x3d, 0x4f, 0xb8, 0x65, 0x42, 0xb0, 0x74, 0xc3, 0x2, 0xa2, 0x3c, 0x63, 0xbb, 0xc3, 0x9b, 0x9e, 0xdc, 0xff, 0x7e, 0x4f, 0xe, 0x8e, 0x18, 0x5c, 0xa, 0x24, 0xc0, 0x9, 0x4c, 0x32, 0xb4, 0x90, 0x36, 0x7a, 0x41, 0x54, 0x9a, 0x96, 0x37, 0x6a, 0xae, 0x5b, 0xb5, 0x6c, 0x6e, 0xd5, 0x76, 0x65, 0x68, 0x7a, 0x67, 0x28, 0x53, 0x64, 0xec, 0xb3, 0x91, 0xf7, 0x85, 0xc4, 0x88, 0x5a, 0xd2, 0x8, 0x12, 0xc5,
0xe9, 0xb1, 0x8b, 0x4a, 0x16, 0xad, 0xe, 0x6f, 0xd5, 0x12, 0xb3, 0x83, 0xd2, 0x8c, 0xbe, 0x3, 0xb3, 0xa3, 0x10, 0xb9, 0x3, 0xdf, 0x7b, 0x89, 0x1a, 0x8c, 0x81, 0x46, 0x8f, 0xd4, 0x22, 0x6b, 0x3b, 0xa0, 0x74, 0x43,
0x93, 0x91, 0xa0, 0x65, 0xf2, 0xe2, 0xe3, 0xb2, 0x8d, 0x31, 0xd1, 0xa, 0xc6, 0x56, 0x47, 0x48, 0x71, 0xf6, 0x99, 0x64, 0xf6, 0x41, 0x63, 0xf6, 0xb2, 0xa8, 0x84, 0x49, 0x22, 0xb7, 0x42, 0xa2, 0x76, 0xe1, 0xde, 0x6c, 0xc2, 0xb5, 0xa4, 0x72, 0xe3, 0xe2, 0xaf, 0x41, 0x4, 0x28, 0x4c, 0x18, 0xae, 0x16, 0x99, 0x9b, 0x54, 0xd0, 0xd8, 0x1a, 0x97, 0x9a, 0xaa, 0x54, 0x98, 0x3d, 0x3f, 0x42, 0x14, 0xc, 0x76, 0x90, 0xbd, 0xd8, 0x50, 0xef, 0xa5, 0xda, 0x69, 0x56, 0x35, 0x1a, 0x61, 0xcc, 0x8d, 0x52, 0x2f, 0xd4, 0x6a, 0xe7, 0x91, 0xba, 0x1a, 0x6, 0x4a, 0xe4, 0xc5, 0x52, 0xc, 0x9a, 0x2d, 0x7e, 0x6b, 0xcc, 0x7a, 0xf1, 0xd9, 0x85, 0xa2, 0x4c, 0xa1, 0x14, 0x91, 0x23, 0xb7, 0xee, 0x10, 0x29, 0x29, 0x59, 0xec, 0xd0, 0x25, 0x27, 0x68, 0x25, 0xbf, 0x51, 0x9d, 0x5c, 0xe8, 0x39, 0x12, 0xd6, 0x72, 0x6e, 0x20, 0xa1, 0x90, 0x10, 0x56, 0x6d, 0x11, 0xc7, 0xda, 0x8, 0x6b,
0xb6, 0x50, 0x1e, 0x74, 0x1f, 0xb5, 0x2a, 0xd9, 0x8c, 0x6a, 0x4f, 0xad, 0xec, 0x18, 0x3b, 0x2b, 0x1a, 0x45, 0x59, 0x30, 0xed, 0xa5, 0x96, 0xf3, 0x8c, 0x38, 0xc9, 0x1d, 0xb2, 0x2d, 0xf9, 0xde, 0xa0, 0x11, 0xc3, 0xe7, 0x8a, 0x8a, 0xd1, 0x5a, 0xc8, 0x35, 0x76, 0x9b, 0x30, 0x56, 0x18, 0x8c, 0x72, 0x93, 0xe9, 0x66, 0xe3, 0x51, 0x26, 0x59, 0xc, 0x2, 0x11, 0x9c, 0x20, 0x29, 0xc7, 0x4a, 0x8c, 0x4a, 0x1, 0x1a, 0x10, 0xb5, 0x1c, 0xa1, 0x51, 0x46, 0xa4, 0x37, 0x46, 0x22, 0x50, 0xe1, 0xc5, 0xaa, 0xb1, 0x8d, 0xbd, 0x24, 0xb1, 0x41, 0x4, 0x9d, 0x40, 0x72, 0x94, 0xdc, 0x85, 0xb2, 0xc0, 0xa0, 0xda, 0x9, 0x91, 0xb6, 0xea, 0x29, 0x62, 0xdd, 0xb2, 0x83, 0x12, 0x4c, 0xea, 0x46, 0xa5, 0x42, 0x39, 0x30, 0x34, 0x9, 0xda, 0xa5, 0x9, 0xdb, 0xcc, 0xee, 0x29, 0x4e, 0xd2, 0x1c, 0x6e, 0xab, 0xb9, 0xa5, 0x40, 0x1e, 0x3a, 0x21, 0x70, 0x47, 0x2b, 0x44, 0xb5, 0xd1, 0xea, 0x95, 0x1e, 0x27, 0x9a, 0xa, 0xd1, 0xda, 0x8c, 0x4a, 0xc1, 0xd4, 0x12, 0x1a, 0xc5, 0x54, 0x62, 0xd1, 0xd9, 0xde, 0xd0, 0xca, 0x52, 0x8b, 0xb1, 0x83, 0x14, 0xc1, 0x5c, 0xd, 0x90, 0xaf, 0xf7, 0xce, 0x19, 0x51, 0x18,
0xa1, 0x32, 0x14, 0x52, 0x42, 0xcf, 0xb7, 0x29, 0x24, 0xa0, 0x80, 0x7a, 0x51, 0xc8, 0x69, 0xd0, 0x2, 0x84, 0x64, 0xd5, 0x58, 0xbe, 0xb3, 0x70, 0x50, 0x7d, 0x8f, 0xdc, 0x30, 0x46, 0x28, 0x77, 0xfc, 0xf4, 0xa6, 0xa5, 0x53, 0xb0, 0xe5, 0x8e, 0x66, 0x2e, 0xb7, 0xb6, 0x47, 0xff, 0xf7, 0xc6, 0x22, 0x7f, 0xb5, 0x70, 0xee, 0x37, 0x91, 0xf8, 0x6d, 0x31, 0xc6, 0xc1, 0xd3, 0xfe, 0xc0, 0xab, 0x9c, 0x3f, 0x57, 0xe0, 0x67, 0x19, 0x14, 0xe7, 0xe5, 0xb6, 0x45, 0xcc, 0x5f, 0x74, 0xcb, 0x93, 0xeb, 0xda, 0xed, 0xf4, 0x5a, 0x56, 0x5, 0x8a, 0x5b, 0x6d, 0x48, 0x38, 0xfd, 0xf0, 0xf, 0x2d, 0x98, 0x8f, 0xa3, };

	BYTE pkt5[] = { 0x55, 0xaa, 0x55, 0xaa, 0xce, 0xcb, 0x16, 0x99, 0x2, 0x0, 0xc6, 0x79, 0x0, 0x0, 0x78, 0x9c, 0xec, 0xbd, 0x89, 0x76, 0xa2, 0xce, 0xf3, 0x3e, 0x7c, 0x2d, 0xef, 0xf9, 0xdf, 0x6, 0x8b, 0x5b, 0x58, 0xa2, 0xd1, 0x44, 0x33, 0xe2, 0xc2, 0x68, 0x26, 0x1a, 0x41, 0x40, 0x70, 0x49, 0x4, 0xf5, 0xe6, 0x5f, 0xba, 0x5b, 0x65, 0x91, 0x2d, 0x89, 0x22, 0x9f, 0xef, 0xaf, 0x9e, 0x73, 0xc6, 0x9, 0x76, 0xdb, 0xb4, 0xd8, 0x45, 0x3d, 0x54, 0xd7,
0xf2, 0xff, 0x8c, 0xfa, 0x4e, 0x2d, 0x35, 0x28, 0x17, 0x8c, 0x48, 0xd7, 0x1d, 0x8a, 0x40, 0x15, 0x36, 0x94, 0x22, 0xb1, 0xa2, 0xc1, 0xad, 0x7a, 0x9d, 0xf2, 0xc2, 0xfd, 0x67, 0xfe, 0x9d, 0xcd, 0x2a, 0xb3, 0x69, 0x77, 0x76, 0xf9, 0xff, 0x3f, 0xab, 0xb9, 0xec, 0xb7, 0xd7, 0xa6, 0x54, 0x96, 0x84, 0xf2, 0xa6, 0x66, 0xae, 0xcc, 0x85, 0xe6, 0xbc, 0x2f, 0xda, 0x16, 0xdd, 0x9f, 0xb, 0x5f, 0xf8, 0xf3, 0x2c, 0x1e, 0x6b, 0x6d, 0x58, 0x3d, 0x66, 0xfe, 0xff, 0xfd, 0x3f, 0xea, 0xc, 0x56, 0xa7, 0xcf, 0x7f, 0xfb, 0xdf, 0x67, 0x34, 0xba, 0x11, 0xf9, 0xbe, 0xe1, 0x7f, 0xdf, 0x37, 0x77, 0x3d, 0xd0, 0xff, 0xfc, 0x37, 0xf3, 0x42, 0x53, 0x25, 0xca, 0x3d, 0x76, 0x4f, 0xa3, 0xf6, 0xc6, 0x95, 0x2f, 0x75, 0xf6, 0xd7, 0x3f, 0x1e, 0x35, 0xf1, 0x3e, 0xb7, 0xe2, 0x66, 0x8b, 0xf, 0x79, 0xd3, 0xb2, 0xd4, 0xfd, 0x66, 0x3e, 0x10, 0x2, 0xdd, 0xa6, 0x5e, 0x37, 0x75, 0x38, 0x69, 0x7c, 0x48, 0xd5, 0x26, 0x2b, 0xd5, 0xdf, 0x56, 0x4a, 0x7b, 0xb1, 0x94, 0x3, 0x3d, 0x3f, 0xa2, 0x27, 0x4e, 0xd7, 0xe8, 0x67, 0xaa, 0xe2, 0xfe, 0x51, 0x77, 0x27, 0xa5, 0xe, 0xe, 0x4b, 0x6e, 0xb0, 0x73, 0xf8, 0xe6, 0x72, 0x39, 0x7b, 0xfb, 0x64, 0x9a, 0xcb, 0x5, 0xd3, 0x92, 0x1f, 0x84, 0xf1, 0xab, 0xc1, 0xb4, 0xa8, 0xe3, 0xff, 0x25, 0x83, 0x69, 0xb8, 0x7f, 0xa3, 0xe3, 0x96, 0x40, 0xde, 0xc7, 0xff, 0x97, 0x96, 0xe4, 0x9f, 0x7b, 0x4c, 0xbd, 0x2d, 0x44, 0xf2, 0xf, 0xb7, 0xff, 0xc1, 0x67, 0x7a, 0xf5, 0x4d, 0x86, 0xe2, 0x16, 0xf6, 0xa1, 0xf1, 0xe1, 0x34, 0x27, 0xf3, 0xed, 0xb8, 0x39, 0x73, 0xcf, 0xc1, 0xb7, 0x4a, 0xf, 0x8f, 0xd4, 0x9b, 0x25, 0xb2, 0xf8, 0xf3, 0xe4, 0x7f, 0xf7, 0xb3, 0x94, 0x3b, 0xe, 0x1a, 0x4f, 0xb0, 0xc8, 0xb8, 0xf8, 0xff, 0x56, 0x83, 0xfc, 0xc3, 0xe3, 0xfb, 0xcf, 0xfb, 0xef, 0x1f, 0xfe, 0x4e, 0xb2, 0xff, 0x54, 0xe6, 0xe9, 0xfb, 0x4c, 0x97, 0x5c, 0x95, 0xd6, 0xcd, 0x7f, 0xa5, 0x41, 0x55, 0xfe, 0xaa, 0xb1, 0xcf, 0x46, 0x8d, 0xa1, 0x64, 0xf7, 0xdf, 0x4a, 0x20, 0xff, 0x53, 0x35, 0x61, 0x63, 0x2e, 0x87, 0x9b, 0xb6, 0xa2, 0x6e, 0x56, 0x1c, 0xcf, 0x76, 0xf4, 0x21, 0xcd, 0xb4, 0x56, 0x62, 0x8b, 0x6b, 0xba, 0xed, 0xc7, 0xfe, 0x42, 0x13, 0xf7, 0x95, 0x6b, 0x15, 0xfc, 0x7d, 0x2a, 0xfe, 0x33, 0xb1, 0xc2, 0xf1, 0xfb, 0x34, 0xc7, 0x8d, 0x69, 0xaf, 0x72, 0xe0, 0x9e, 0x9f, 0x3e, 0x7, 0xec, 0x9b, 0x2c, 0xb6, 0x8e, 0x9f, 0x39, 0x9d, 0x93, 0xa2, 0x64, 0xcd, 0xa9, 0xb7, 0x54, 0xbe, 0xbd, 0x9e, 0xef, 0xa5, 0x8a, 0xed, 0xcc, 0xe, 0xed, 0xe5, 0x43, 0xfd, 0x79, 0x25, 0xf6, 0x51, 0xfb, 0xb1, 0xff, 0xea, 0x38, 0x3f, 0xf9, 0x8f, 0x71, 0x71, 0xfd, 0x4, 0x7d, 0xc8, 0x2c, 0xe7, 0x22, 0xf7, 0xc1, 0x89, 0x52, 0xc3, 0x90, 0x9c, 0x8f, 0xa7, 0xea, 0xdf, 0xcf, 0x1a, 0x5b, 0x32, 0x8e, 0xdf, 0x45, 0x76, 0xaf, 0x1d, 0x3e, 0x17, 0xe5, 0xfe, 0x33, 0x67, 0xdb, 0xdd, 0xd7, 0xae, 0xab, 0xad, 0xf4, 0xde, 0x74, 0xb5, 0x57, 0x38, 0x5, 0x9f, 0x4b, 0xf8, 0xc0, 0xfd, 0xc6, 0xc7, 0xfe, 0xf8, 0x7b, 0xd1, 0xd3, 0xcb, 0xeb,
0x67, 0x95, 0x3e, 0xec, 0xc1, 0x14, 0x5d, 0xbf, 0xd5, 0x9c, 0x3d, 0x5d, 0xbf, 0xf3, 0xf8, 0xee, 0xbf, 0x85, 0xc0, 0x1e, 0xaf, 0x1f, 0xc3, 0x8a, 0x8e, 0xda, 0x9c, 0xac, 0x66, 0x76, 0x7b, 0x67, 0x8e, 0x8c, 0x95, 0xbd, 0x31, 0x1a, 0x6f, 0xbb, 0xd6, 0xb3, 0xf9, 0x46, 0xfa, 0x91, 0x73, 0x2d, 0x18, 0x74, 0xae, 0xca, 0xdb, 0xc5, 0xf5, 0x63, 0x94, 0xce, 0xab, 0x21, 0xd8, 0xc2, 0xd2, 0xd9, 0x3c, 0xe9, 0xda, 0xaa, 0xf5, 0x54, 0x72,
0xaf, 0x9f, 0x37, 0xbe, 0x7c, 0xfe, 0x7e, 0xee, 0xf5, 0x43, 0xbf, 0xd5, 0x82, 0x1b, 0xb6, 0x95, 0xb9, 0xb4, 0xb9, 0xfc, 0xad, 0x4a, 0xa6, 0x40, 0xfa, 0x3f, 0xa0, 0xcf, 0x75, 0xe5, 0xcb, 0xf5, 0x67, 0xee, 0xbb, 0xf6, 0x5e, 0x69, 0x2a, 0xa6, 0xb3, 0xde, 0xdb, 0x2f, 0x62, 0x29, 0xee, 0xfa, 0xb1, 0x82, 0xfe, 0xae, 0x1d, 0x66, 0xcb, 0x99, 0xa3, 0x8b, 0xba, 0xb6, 0x36, 0xe, 0xa2, 0x2b, 0x1f, 0x25, 0xdf, 0xf5, 0x6b, 0xd5, 0xc8, 0xba, 0x68, 0x8, 0xe8, 0xca, 0x29, 0xe1, 0xeb, 0x47, 0x53, 0x5d, 0x7b, 0xcd, 0xd7, 0xab, 0xba, 0xb6, 0xa4, 0x9e, 0xff, 0xfd, 0x6d, 0x3d, 0x2f, 0x9f, 0xe2, 0xae, 0x5f, 0x4d, 0xdb, 0x8d, 0xac, 0x85, 0x6d, 0xcf, 0xd5, 0xba, 0x25, 0xee, 0x9a, 0xf1, 0xd7, 0x8f, 0x42, 0xeb, 0xa1, 0x62, 0x84, 0xaf, 0x5f, 0x89, 0x99, 0xb3, 0xd, 0x6d, 0x5f, 0x39, 0x9e, 0x2f, 0xe9, 0xfa, 0x59, 0x8d, 0x25, 0xaf, 0xff, 0xf5, 0x9d, 0x8f, 0xd3, 0x57, 0x73, 0x7c, 0xfd, 0x3a, 0x81, 0xeb, 0xf7, 0xcc, 0xa2, 0x81, 0xa5, 0x46, 0xf8, 0xfa, 0x35, 0x4a, 0xea, 0xfe, 0xc0, 0x6c, 0xd1, 0x14, 0xca, 0xf, 0xaf, 0x4f, 0xe5, 0xbf, 0xd5, 0xa7, 0xcd, 0xdf, 0xcf, 0xc7, 0x26, 0x65, 0x9d, 0xaf, 0x9f, 0x45, 0xfe, 0xa7, 0x95, 0xba, 0x6e, 0x68, 0x9a, 0x71, 0xe0, 0xd0, 0x9a, 0x18, 0x77, 0xb6, 0xea, 0x4c, 0xf7, 0x7d, 0x27, 0xf3, 0xd8, 0x7f, 0x41, 0xae, 0x5, 0xad, 0x5d, 0xae, 0x3f, 0xa5, 0xaa, 0xef, 0x98, 0x89, 0x3b, 0xc3, 0xa7, 0x9d, 0xa0, 0x69, 0xed, 0x52, 0xbf, 0x4a, 0xe4, 0x57, 0x38, 0x5d, 0x3f, 0xcb, 0x93, 0xdf, 0x99, 0xa6, 0xf, 0x8e, 0x6b, 0x42, 0x1c, 0xce, 0xcc, 0xd9, 0x2e, 0x41, 0x7e, 0x9d, 0x8b, 0xf5, 0x47, 0xab, 0xd5, 0x8a, 0xd9, 0xd3, 0x9b, 0xb3, 0x6, 0xdd, 0x6c, 0x97, 0x9e, 0x5e, 0x9f, 0x96, 0x7d, 0x2c, 0xbf, 0xa7, 0xef, 0x72, 0x3e, 0xa7, 0xbb, 0xfe, 0xac, 0x21, 0xff, 0x74, 0xe8, 0x77, 0x35, 0x6b, 0xf8, 0x3c, 0x55, 0x43, 0x6b, 0xe2, 0x28, 0xbf, 0x8b, 0x93, 0xfc, 0xf6, 0xa8, 0xcb, 0xf5, 0xa7, 0x6d, 0x5b, 0xf, 0xb6, 0x34, 0xb4, 0x39, 0xbe, 0x65, 0x71, 0x2f, 0xf1, 0xd7, 0x8f, 0x62, 0x18, 0xdb, 0xd8, 0x3d, 0x1a, 0x73, 0xa9, 0xbb, 0xf9, 0x52, 0x25, 0xdd, 0x54, 0x76, 0x12, 0xbe, 0x7e, 0xab, 0xa5, 0x77, 0xef, 0x62, 0x9f, 0xe5, 0xe3, 0xf5, 0x5b, 0x5c, 0x5e, 0xbf, 0xb1, 0x2b, 0x93, 0xad, 0xd9, 0xb2, 0x3b, 0xe1, 0x67, 0xff, 0xfe, 0x96, 0x8e, 0xd7, 0xcf, 0x5d, 0x7f, 0xe7, 0xfb, 0xdf, 0xe2, 0x38, 0x5f, 0x24, 0xbf, 0x9c, 0xa2, 0x6c, 0x8e, 0xf2, 0x9b, 0xf2, 0x5b, 0x55, 0x6b, 0x17, 0xd7, 0x2f, 0xa0, 0x57, 0x1e, 0xe8, 0x97, 0xda, 0x51, 0x87, 0xf6, 0x2a, 0x65, 0xfd, 0x4f, 0xe5, 0xdf, 0x5f, 0x69, 0xf4, 0x65, 0xbc, 0xb6, 0x55, 0x91, 0x99, 0x3c, 0xfd, 0x1b, 0xa0, 0xe3, 0xb5, 0x7b, 0x6c, 0x7e, 0x35, 0xf0, 0x7b, 0xff, 0x68, 0xf3, 0xcf, 0xe6, 0xc5, 0xfa, 0xd3, 0xaa, 0x69, 0xfd, 0xf5, 0x3f, 0x95, 0x6d, 0x7c, 0x68, 0x7f, 0xda, 0xff, 0x26, 0xfd, 0x76, 0x59, 0xeb, 0x57, 0x5e, 0x3e, 0xbb, 0xed, 0xb2, 0xce, 0x4f, 0xe8, 0xbf, 0x5d, 0x63, 0xc9, 0xf5, 0x37, 0x2f, 0x8b, 0x6e, 0xe7, 0x38, 0x86, 0x79, 0x1a, 0xf3, 0xdf, 0xc7, 0x9f, 0xc9, 0xcb, 0xf2, 0x4f, 0xe7, 0xef, 0xc7, 0x6b, 0xdb, 0xd1, 0xdc, 0x73, 0x2a, 0xee, 0x18, 0x6f, 0xf8, 0xf3, 0xeb, 0x97, 0x8f, 0xd3, 0x67, 0x5b, 0xef, 0x2f, 0x1b, 0x69, 0x43, 0xbf, 0x34, 0x9b, 0xc7, 0xf3, 0x4e, 0xc4, 0xa9, 0xe4, 0x9e, 0xb7, 0x5b, 0xf9, 0x17, 0xfe, 0xec, 0xa6, 0xdf, 0x29, 0x7f, 0x9c, 0xce, 0x2d, 0x34, 0x23, 0xcf, 0xb3, 0x38, 0x8d, 0xfb, 0xb4, 0x79, 0xf9, 0x2b, 0xbd, 0xf7, 0xbb, 0xfd, 0xd3, 0xb8, 0xae, 0xaa, 0x7a, 0x7a, 0xfb, 0xd3, 0xe2, 0xff, 0x91, 0xf6, 0xde, 0xe6, 0xe9, 0xaf, 0x3b, 0x16, 0x1a, 0x6f, 0xce, 0x4f, 0xfa, 0x5b, 0x89, 0x72, 0xe7, 0xd2, 0xde, 0x69, 0xa2, 0xd5, 0xd3, 0x9e, 0xc9, 0xf9, 0x3e, 0x5e, 0xd7, 0x3b, 0xed, 0xd4, 0x7f, 0xe9, 0xd8, 0xf5, 0xb9, 0x5d, 0x79, 0x77, 0x8f, 0xe9, 0x26, 0x1a, 0x7f, 0x5d, 0x9e, 0xff, 0x39, 0x8d, 0x1d, 0xd0, 0xec, 0xb4, 0xe4, 0xfd, 0xde, 0x1,
0xa, 0x33, 0xf2, 0x34, 0xbe, 0xd8, 0x98, 0x70, 0x1f, 0xfd, 0xf6, 0xce, 0x92, 0x6, 0x87, 0x3d, 0xd1, 0x9a, 0xf, 0x42, 0xe3, 0xcd, 0x60, 0x1b, 0xd3, 0x15, 0xd3, 0x9b, 0xfd, 0x5b, 0x49, 0x9b, 0xba, 0xad, 0x56, 0x88,
0x16, 0x6d, 0xbc, 0xb9, 0x5a, 0x9f, 0x12, 0x99, 0xf1, 0xf3, 0x83, 0x39, 0xeb, 0xbc, 0xe8, 0x3d, 0xa5, 0x6d, 0xef, 0x97, 0x58, 0xfb, 0xe2, 0xcf, 0xb9, 0x33, 0x3f, 0x8d, 0xa7, 0xf, 0x5a, 0x6d, 0x2d, 0x3c, 0x9e, 0x34, 0x98, 0x9a, 0xc3, 0xaa, 0x38, 0xb7, 0xf, 0x9f, 0xe1, 0xf1, 0x5c, 0xed, 0xf8, 0xe0, 0xf4, 0xe, 0x9a, 0x21, 0x35, 0x42, 0xe3, 0xbd, 0x6f, 0x66, 0xc2, 0x64, 0x61, 0xce, 0x25, 0xdd, 0x6e, 0x44, 0x8d, 0x57, 0xd9, 0x7d, 0x89, 0xdd, 0x8b, 0xf1, 0xac, 0x47, 0xab, 0xe3, 0x8, 0xeb, 0x8d, 0x7e, 0x90, 0xc3, 0xf3, 0x13, 0x6c, 0x71, 0x68, 0x58, 0x7b, 0x9b, 0x9e, 0x5f, 0x7c, 0x5f, 0x4b, 0x5d, 0x1d, 0x58, 0x6e, 0xa5, 0x1d, 0xe6, 0x91, 0xe3, 0xf1, 0x1b, 0x97, 0x3f, 0x85, 0xc6, 0x73, 0xf9, 0xd8, 0x7e, 0x5e, 0xa5, 0x82, 0xfd, 0x1b, 0xf, 0x8b, 0xee, 0xe6, 0x65, 0x2e, 0x7, 0xc6, 0x5f, 0x32, 0x83, 0x4e, 0x63, 0x39, 0xab, 0x3f, 0x98, 0xc1, 0xf3, 0x5a,
0xe8, 0xbc, 0xae, 0xc6, 0x7a, 0x70, 0x24, 0xab, 0x13, 0x1c, 0x47, 0x20, 0xd7, 0x59, 0xaa, 0xbc, 0xeb, 0x62, 0x2f, 0x70, 0x5e, 0xc1, 0x20, 0xd7, 0x65, 0x31, 0xd4, 0x36, 0x5f, 0x46, 0x78, 0xbc, 0xd6, 0xc0, 0xec, 0x57, 0x5b, 0x8e, 0xc8, 0x33, 0xe1, 0xf1, 0xc8, 0xf7, 0xe8, 0x50, 0x8b, 0xbe, 0x1a, 0x1a, 0xcf, 0xbd, 0x2e, 0xc2, 0xec, 0x5d, 0xdd, 0xb6, 0xca, 0x6b, 0x23, 0x34, 0x6f, 0x89, 0x7d, 0x5e, 0xf5, 0xf, 0x2e, 0xfb, 0x19, 0x37, 0xc2, 0xdf, 0xd3, 0x54, 0x47, 0xf6, 0x56, 0x19, 0x4c, 0x57, 0xbd, 0x8b, 0xeb, 0x22, 0x1a, 0x42, 0x75, 0x1b, 0xec, 0x5f, 0x7a, 0x58, 0x6d, 0x1f, 0x3f, 0xa7, 0xbb, 0xba, 0x18, 0x7e, 0x5f, 0xdd, 0x9a, 0xce, 0x7c, 0x3e, 0x18, 0x6b, 0x5c, 0xbd, 0x65, 0x5, 0x7f, 0x67, 0xd3, 0xd7, 0x97, 0xcc, 0xd5, 0xfd, 0x9b, 0x50, 0xdf, 0x40, 0x3f, 0xb7, 0x9d, 0x7f, 0x9e, 0x29, 0x95, 0xf7, 0xf0, 0xd8, 0x62, 0xbf, 0x39, 0x53, 0xbb, 0xaf, 0xc1, 0xef, 0xeb, 0xb6, 0xb, 0x62, 0xe4, 0xfb, 0x66, 0xcc, 0xfb, 0xab, 0x98, 0xf7, 0x5d, 0x2d, 0xca, 0x46, 0x9f, 0xd7, 0xd5, 0xe4, 0xd1, 0xf3, 0x74, 0xb5, 0x6d, 0xc2, 0x67, 0xe2, 0xcf, 0x13, 0xdb, 0xb6, 0x8a, 0x6d,
0xf3, 0x9d, 0xfb, 0x74, 0xe, 0x6b, 0xbe, 0x75, 0x66, 0xbb, 0xce, 0xfb, 0x42, 0x97, 0x43, 0xe3, 0x4c, 0xd4, 0x99, 0x3d, 0x9c, 0x2c, 0xd4, 0xf0, 0xf8, 0xef, 0x87, 0x99, 0xea, 0xca, 0x86, 0x14, 0x7e, 0x7f, 0x42, 0xef, 0x76, 0x6c, 0x55, 0x3b, 0xb0, 0xad, 0xad, 0x9c, 0xfc, 0x9b, 0xb9, 0x72, 0x47, 0xad, 0xe, 0xdd, 0x59, 0xf4, 0x7d, 0x86, 0xed, 0xec, 0x66, 0x4a, 0xe4, 0x7d, 0xc6, 0x10, 0x87, 0xeb, 0xd9, 0x1c, 0xdd, 0x4f, 0xc2, 0xf7, 0x5, 0x32, 0x9e, 0xab, 0x2d, 0x45, 0x27, 0xb8, 0x5e, 0x37, 0xc7, 0xf1, 0x5e, 0xf4, 0x7e, 0xe5, 0x5f, 0x70, 0xbc, 0xde, 0x71, 0xbc, 0xaa, 0x33, 0xaf, 0x5f, 0xdc, 0x17, 0xe8, 0xe5, 0xbc, 0xfa, 0x1e, 0x3d, 0xbf,
0x6a, 0x73, 0x39, 0x90, 0xa2, 0xe7, 0xd7, 0xe7, 0x9f, 0xbe, 0x5c, 0x66, 0x1b, 0x31, 0x3f, 0x3c, 0x5e, 0xf4, 0xfc, 0xf0, 0x78, 0xa5, 0x8f, 0x5d, 0xc4, 0xfc, 0xd0, 0x78, 0x91, 0xf3, 0x7b, 0xff, 0xfa, 0x54, 0x1f, 0x47, 0x91, 0xf3, 0x93, 0x26, 0x23, 0x63, 0xcb, 0x47, 0xce, 0x4f, 0x1b, 0xf0, 0xec, 0x54, 0xe9, 0x50, 0x97, 0xf3, 0x23, 0xe3, 0x45, 0xce, 0xf, 0x8f, 0xc7, 0xad, 0xc, 0xf1, 0x72, 0x7e, 0x78, 0xbc, 0x88, 0xf9, 0x5d, 0xae, 0xb3, 0xe7, 0x7, 0x57, 0x77, 0xc4, 0xdd, 0xd3, 0xed, 0x85, 0xb2, 0x31, 0xe2, 0xdb, 0x27, 0xae, 0x6e, 0x89, 0xbb, 0xe7, 0xeb, 0x15, 0x7d, 0xc8, 0xc6, 0xb7, 0xbb, 0xba, 0x27, 0x4e, 0x27, 0x68, 0x4e, 0x77, 0xe7,
0x88, 0x71, 0xed, 0xbd, 0xe3, 0x7c, 0x67, 0xff, 0x96, 0xdd, 0xe7, 0xe0, 0x7c, 0xc, 0xdf, 0x7c, 0x23, 0xd6, 0x14, 0x79, 0x3f, 0xe2, 0x37, 0xf3, 0x7f, 0x4e, 0x6a, 0x5d, 0xcc, 0x87, 0x9c, 0x2f, 0x4a, 0x47, 0xf9, 0x3f, 0x77, 0xa9, 0x2b, 0x5d, 0x9d, 0x50, 0xfa, 0x70, 0xe2, 0xaf, 0x6b, 0x7c, 0xbb, 0xab, 0x9b, 0x7b, 0xcd, 0x49, 0xc2, 0x75, 0x8d, 0x6f, 0x77, 0xaf, 0xcb, 0x82, 0x1b, 0xc4, 0x5f, 0x57, 0x21, 0xae, 0xbd, 0x47, 0xe6, 0x8b, 0x9e, 0x14, 0x63, 0xae, 0x2b, 0x6e, 0x8f, 0x90, 0x5, 0xf2, 0x7e, 0xfc, 0x75, 0x25, 0xe3, 0x5e, 0x5e, 0x57, 0xf2, 0xfd, 0xe3, 0xaf, 0x2b, 0xf9, 0xdc, 0xe5, 0x75, 0x5d, 0xd, 0xba, 0xf6, 0x56, 0x4d, 0x58, 0xaf,
0xb1, 0xed, 0x93, 0x97, 0x2f, 0x45, 0x9f, 0x25, 0xad, 0xd7, 0xd8, 0xf6, 0x7e, 0xe7, 0x5d, 0xdb, 0xcf, 0x12, 0xd6, 0x6b, 0x5c, 0x7b, 0x8f, 0xcc, 0xd7, 0x95, 0xed, 0xd8, 0xf5, 0x8a, 0xda, 0xe7, 0x11, 0xeb, 0x15, 0xbf, 0x9f, 0xb0, 0x5e, 0xf1, 0xb8, 0x11, 0xeb, 0x15, 0x7f, 0xff, 0x84, 0xf5, 0x8a, 0x3f, 0x17, 0xbe, 0xae, 0x27, 0xf9, 0xa8, 0x28, 0xab, 0x5e, 0x2d, 0x41, 0xae, 0x3a, 0x4c, 0xf4, 0x3c, 0x13, 0x3e, 0x87, 0xdb, 0x2f,
0x3f, 0x77, 0x5c, 0x4f, 0xb1, 0x9f, 0x23, 0xed, 0xe1, 0xcf, 0x9, 0x9e, 0xae, 0x11, 0x7b, 0xd3, 0x85, 0x48, 0x7d, 0x24, 0xb6, 0x77, 0x3f, 0x2f, 0xdb, 0x8f, 0xba, 0x60, 0xa9, 0xd6, 0xa2, 0x3f, 0xef, 0x6f, 0x8f, 0xf8, 0xfc, 0xe9, 0x5e, 0xed, 0x72, 0xb3, 0xc8, 0xcf, 0x7, 0xda, 0x23, 0x3e, 0x3f, 0xdf, 0x1f, 0x5c, 0xe, 0xe7, 0xea, 0xa2, 0x4b, 0xae, 0x68, 0x9b, 0xe, 0xe6, 0x98, 0x4d, 0x23, 0xcc, 0x49, 0xa5, 0xfd, 0xcc, 0x7a, 0x34, 0xc2, 0xdc, 0xed, 0xc5, 0x71, 0xf5, 0x7d, 0x98, 0xeb, 0x2d, 0xeb, 0xb6, 0x60, 0x53, 0x91, 0xba, 0xf6, 0x69, 0x76, 0x71, 0x3d, 0x4f, 0xba, 0x2c, 0xf2, 0x77, 0xc0, 0xba, 0x67, 0xd9, 0xd5, 0x5f, 0x42, 0xf3, 0x71, 0xef, 0x33, 0x83, 0x83, 0xb6, 0x3d, 0x24, 0x70, 0x5, 0x5f, 0x7b, 0x24, 0x87, 0xf7, 0xda, 0x57, 0xd2, 0x7a, 0xf7, 0x95, 0xd0, 0x1e, 0xad, 0x9b, 0xfd, 0x9f, 0xdf, 0x3c, 0x7d, 0x34, 0xe2, 0xdb, 0x97, 0x43, 0x73, 0x19, 0x33, 0xbf,
0x4, 0x2e, 0xe1, 0x6b, 0x8f, 0x9f, 0x3f, 0x6e, 0xc7, 0xf7, 0xd3, 0x84, 0xf6, 0x84, 0xf9, 0x1f, 0x3f, 0x3f, 0x8c, 0x9b, 0x3f, 0x6e, 0x8f, 0x9f, 0xff, 0x3e, 0x9e, 0x6b, 0xf8, 0xdb, 0x63, 0xe7, 0x4f, 0xda, 0xe7, 0x3d, 0x26, 0x66, 0xfe, 0xfb, 0x78, 0xee, 0x11, 0xf8, 0x3c, 0x1b, 0x33, 0x7f, 0xd2, 0x1e, 0x31, 0xff, 0xd, 0xd3, 0x5a, 0xee, 0xea, 0xad, 0xd0, 0x33, 0x29, 0x45, 0xe4, 0xde, 0xea, 0xb1, 0xf4, 0xfe, 0x62, 0xfd, 0xd7, 0x65, 0xf7, 0xfe, 0xfc, 0x6f, 0x29, 0x72, 0x63, 0xf3, 0xf2, 0x19, 0xa6, 0x63, 0xd9, 0xee, 0xfd, 0x22, 0xee, 0x19, 0xc7, 0x98, 0x54, 0x75, 0x5b, 0xd3, 0xc9, 0x7d, 0x21, 0x6a, 0x9d, 0x1f, 0xdb, 0x63, 0xe5, 0x80, 0xb4, 0x13, 0x4e, 0x15, 0xd1, 0x7e, 0x9c, 0xb7, 0xbe, 0x55, 0xc2, 0x72, 0xb7, 0x3c, 0xe9, 0x95, 0x28, 0x39, 0x25, 0x7a, 0x83, 0xdd, 0x87, 0xe5, 0x5a, 0x8, 0xf0, 0x91, 0xcb, 0x67, 0x4d, 0x8f, 0x1f, 0x55, 0xc3, 0xcf, 0x80, 0x96, 0x9f, 0x1f, 0x44, 0xdd, 0x5f, 0x3c, 0xde, 0xd1, 0x91, 0xa2, 0xc7, 0xc5, 0x7a, 0xcc, 0x59, 0x45, 0x8f, 0x8b, 0xf5, 0xe3, 0xc5, 0x33, 0xa9, 0xfc, 0x86, 0x7e, 0xcb, 0x5d, 0x3d, 0xb8, 0x6, 0xd6, 0x67, 0xe, 0x28, 0x4d, 0x4a, 0x52, 0xf5, 0x55, 0x13, 0xd2, 0xda, 0xe5, 0x94, 0x76, 0x23, 0xb9, 0x5d, 0xa4, 0x52, 0xda, 0x2f, 0x9e, 0x57, 0xf1, 0x1a, 0xdc, 0x85, 0x9f, 0xed, 0xf0, 0x75, 0xe0, 0x2b, 0xef, 0xe6, 0x6c, 0xa7, 0xf6, 0x47, 0x9f, 0x8b, 0x94, 0x76, 0x33, 0xa5, 0xdd, 0x4a, 0x69, 0x5f, 0xa6, 0xb4, 0xaf, 0x82, 0xed, 0xb5, 0x87, 0x7a, 0x84, 0xec, 0x8, 0x47, 0xdd, 0x3e, 0x57, 0x86, 0xd6, 0xf2, 0x7d, 0xb1, 0xe6, 0xc7, 0xa5, 0x94, 0xf6, 0x5a, 0x4a, 0xbb, 0x90, 0xd2, 0xde, 0x48, 0x69, 0x7f, 0xce, 0xb2, 0x46, 0x16, 0xe4, 0x37, 0x62, 0xd6, 0x1b, 0xa1, 0x53, 0x89, 0x58, 0x23, 0x97, 0xed, 0xe1, 0x67, 0xf4, 0x70, 0xbb, 0x91, 0xdc, 0x1e, 0x5a, 0x23,
0x97, 0xed, 0x99, 0xd6, 0x48, 0xdc, 0x6f, 0x30, 0xe9, 0xcc, 0xd4, 0xc9, 0xd6, 0x95, 0x4b, 0x4e, 0x9, 0xcf, 0xa3, 0x55, 0x33, 0x4, 0x96, 0x59, 0xec, 0xfb, 0xcc, 0x3f, 0xb5, 0xcf, 0xed, 0xed, 0xf0, 0xf7, 0x6c, 0x3d, 0xa7, 0xb4, 0x23, 0x5b, 0x4, 0x65, 0x9c, 0xf6, 0x8, 0x75, 0x2d, 0xfa, 0xf7, 0x37, 0xf7, 0x93, 0x8a, 0x42, 0x45, 0x7f, 0x7, 0xff, 0xbf, 0x30, 0x7, 0x20, 0xe3, 0xea, 0x86, 0x31, 0x54, 0xb8, 0x8f, 0x88, 0x67, 0x27,
0xb2, 0x26, 0x13, 0xda, 0xf, 0xee, 0x3d, 0x5b, 0x8d, 0x7c, 0x26, 0xc3, 0xdf, 0xe9, 0xd4, 0x1e, 0xc7, 0x65, 0x93, 0xda, 0x1d, 0xa1, 0xba, 0x35, 0x67, 0xed, 0x4b, 0x1d, 0x28, 0x55, 0xbf, 0x96, 0x5c, 0xfb, 0xd4, 0x7e, 0xa9, 0xc3, 0xc8, 0x6f, 0x9b, 0xd4, 0x4e, 0xbe, 0x8f, 0xb4, 0x79, 0xb, 0x73, 0xe8, 0xc0, 0xf5, 0x18, 0x5c, 0xda, 0x19, 0x3, 0xd7, 0x23, 0xaa, 0xfd, 0xf8, 0x7d, 0x2e, 0xed, 0xae, 0xc1, 0xeb, 0x11, 0xf7, 0xc, 0x93, 0xd4, 0x4e, 0xbe, 0x4f, 0xe7, 0x52, 0xa7, 0x7, 0xaf, 0x47, 0x84, 0xfd, 0x21, 0x70, 0x3d, 0xa2, 0xda, 0x8f, 0xd7, 0x23, 0xfc, 0x6c, 0x20, 0x4, 0xaf, 0x47, 0x84, 0x4e, 0xa, 0xae, 0x9f, 0x4b, 0x7b, 0x66, 0xe0, 0x7a, 0xc5, 0xe9, 0x34, 0x3e, 0xe1, 0xf3, 0xc7, 0xeb, 0x11, 0xa5, 0xd3, 0x8e, 0xd7, 0x23, 0x82, 0x33, 0x7, 0xd7, 0xc7, 0xf4, 0xc2, 0x5e, 0x1a, 0x5c, 0x1f, 0x11, 0xed, 0xc7, 0xf9, 0xae, 0xc7, 0xc9, 0xf2, 0x72, 0xc9, 0xa9, 0x83, 0xdf, 0x27, 0xa2, 0xfd, 0xf8, 0x7d, 0x22, 0xb8, 0x46, 0x45, 0xef, 0xd5, 0x17, 0xab, 0x99, 0xdd, 0x58, 0x84, 0x39, 0x57, 0x9f, 0xf9, 0xbb, 0x72, 0x94, 0xb6, 0x32, 0x67, 0xab, 0x17, 0xf3, 0x11, 0x87, 0xb4, 0x2d, 0x76, 0xb5, 0xa5, 0xd0, 0xb, 0x8f, 0x47, 0x59, 0x36, 0xfb, 0x2f, 0x72, 0xbc, 0xde, 0x64, 0xa1, 0xa9, 0x6c, 0xc4, 0x78, 0x6e, 0x1f, 0x72, 0xed, 0x16, 0xcb, 0xb, 0x9b, 0x28, 0x77, 0xbc, 0x47, 0x85, 0xf5, 0xc7, 0xdb, 0xea, 0x74, 0x6f, 0xba, 0x18, 0xab, 0xc5, 0xc4, 0x7e, 0x46, 0xe0, 0xe3, 0xce, 0xe3, 0xde, 0xef, 0xa2, 0xdb, 0x36, 0xe4, 0x77, 0xed, 0xe0, 0xeb, 0xca, 0x89, 0xd5, 0x1d, 0x17, 0xe6, 0x9e, 0xfe, 0x76, 0xf7, 0x39, 0x2b, 0xb1, 0x9d, 0x9f, 0xcc, 0x53, 0xda, 0xdb, 0xc9, 0xe3, 0x4f, 0x16, 0x97, 0xed, 0xfa, 0xeb, 0xb2, 0x8b, 0x76, 0xe9, 0x17, 0x6b, 0x21, 0xa9, 0xed, 0xe2, 0x7b, 0xf9, 0xda, 0x2e, 0x6c, 0x7d, 0x5e, 0x9b, 0x18, 0xe6, 0xd2, 0xfe, 0xb6, 0xb0, 0xfe, 0xea, 0xd9, 0x3, 0x6b, 0xb7, 0xb5, 0xd7, 0x82, 0xf2, 0x62, 0xed, 0x43, 0x3a, 0x5b, 0x9e, 0x54, 0x56, 0xbd, 0xf5, 0x54, 0xdb, 0x8d, 0xb9, 0x55, 0xef, 0xf0, 0x16, 0xfe, 0xdd, 0x5c, 0xd9, 0xb8, 0xfc, 0x5d, 0xfa, 0x9c, 0xad, 0xf3, 0x52, 0x6d, 0xad, 0x28, 0x75, 0x73, 0xe6, 0x84, 0x75, 0xd0, 0xfa, 0xa0, 0x98, 0x6b, 0x53, 0x9c, 0x6d, 0x2d, 0x67, 0xa6, 0x87, 0xc7, 0x33, 0xeb, 0x6b, 0x67, 0xae, 0x8e, 0xbb, 0x9a, 0x7a, 0x8, 0xeb, 0x47, 0x74, 0xef, 0x61, 0x97, 0xf6, 0x49, 0x16, 0x3b, 0xe1, 0xe7, 0x89, 0x50, 0x7b, 0x94, 0x2e, 0x8, 0xb4, 0x47, 0xdd, 0xeb, 0xfd, 0xe3, 0x47, 0xd9, 0x7f, 0xfc, 0xed, 0x11, 0xf7, 0xd6, 0xc0, 0xf8, 0xe1, 0x7b, 0xa7, 0x15, 0x6a, 0x8f, 0xe2, 0xcf, 0xfe, 0xf1, 0xc3, 0xf7, 0xaa, 0xf0, 0xf9, 0xc3, 0xcf, 0xdb, 0xcb, 0xf0, 0xf7, 0x9b, 0x5e, 0xae, 0xf, 0xb7, 0x9d, 0x4d, 0x90, 0x9, 0x5f, 0x7b, 0xa4, 0x4c, 0xf8, 0xda, 0x23, 0x65, 0x22, 0xd0, 0x1e, 0x21, 0x13, 0xfe, 0xf1, 0x2f, 0x64, 0x2, 0xcb, 0xb3, 0x35, 0x8c, 0xd9, 0xf7, 0x69, 0xb1, 0xa2, 0x33, 0x8f, 0xdd, 0xb3, 0x89, 0x69, 0x7b, 0xc7, 0xbb, 0xea, 0xd1, 0x6b, 0xed, 0x78, 0x7f, 0xee, 0x57, 0x66, 0xe1, 0x35, 0x8a, 0xf8, 0x4, 0xfa, 0x1c, 0x96, 0x97, 0xb, 0xae, 0x88, 0xe5, 0x9a, 0xdf, 0xf6, 0xba, 0x6a, 0x78, 0x8e, 0xd8, 0xdb, 0x47, 0xd0, 0x3f, 0x16, 0x33, 0x23, 0x41,
0x5f, 0x4f, 0x16, 0x11, 0xf6, 0x7b, 0x9f, 0xbe, 0x8f, 0x6c, 0xc7, 0xf3, 0x49, 0x6a, 0xf7, 0x8f, 0x9f, 0xcc, 0x27, 0x22, 0xdb, 0x3, 0xe3, 0x87, 0xdb, 0x5d, 0xce, 0xca, 0xcd, 0xc4, 0x61, 0x4b, 0xd3, 0xa9, 0xf0, 0xfb, 0x95, 0x3d, 0xff, 0xfe, 0xae, 0xce, 0x2e, 0xf6, 0x9e, 0x58, 0x47, 0xb0, 0x54, 0xed, 0x70, 0xd1, 0x9f, 0x5f, 0x88, 0xd2, 0xab, 0xe1, 0xde, 0x1f, 0x1c, 0x7e, 0x3d, 0x9e, 0x6f, 0x2f, 0x3e, 0x87, 0xdb, 0xdd, 0xdf, 0xa5, 0xbc, 0x16, 0xc2, 0xfc, 0xc2, 0xbd, 0x37, 0x38, 0xad, 0xf6, 0x5a, 0xa8, 0x7e, 0xb8, 0xcf, 0x9e, 0xee, 0xe7, 0x87, 0x76, 0xa0, 0x3d, 0xb0, 0x5b, 0xce, 0x8e, 0xbd, 0x5d, 0x71, 0x62, 0xd1, 0xc6, 0xbf, 0xca, 0x4e, 0x18, 0x3f, 0x5b, 0xfc, 0xae, 0xce, 0x2e, 0x77, 0xb3, 0xb5, 0xd5, 0x6f, 0xa9, 0x96, 0x38, 0xe6, 0x3e, 0x55, 0x5b, 0x5f, 0x28, 0xfd, 0x9e, 0xdb, 0xb6, 0xe0, 0x1d, 0xfd, 0xcb, 0xe5, 0xbd, 0x5f, 0x2b, 0xf7, 0x3d, 0x5d, 0x9f, 0xb4, 0x96, 0x7c, 0xe5, 0xc3, 0x50, 0x3f, 0x7a, 0xf8, 0x73, 0x36, 0xb3, 0x5c, 0x6d, 0xcb, 0xad, 0x66, 0xe9, 0x5f, 0xe5, 0x85, 0xb7, 0x1c, 0xce, 0x51, 0x2c, 0x75, 0xa0, 0x74, 0x1c, 0xdb, 0x72, 0xf4, 0xe1, 0xb8, 0xb1, 0xe4, 0x79, 0x63, 0xbe, 0x7b, 0x15, 0x99, 0xf9, 0x60, 0x66, 0xe, 0x15, 0xb4, 0xfb, 0xa0, 0xd7, 0x5b, 0xb5, 0x95, 0x60, 0x1e, 0x5a, 0xc6, 0xae, 0xde, 0x5d, 0x6d, 0x95, 0x87, 0xfd, 0x7c, 0x30, 0x5d, 0x3a, 0xe2, 0xf5, 0xce, 0xa5, 0x3c, 0xaa, 0xee, 0x9d, 0xb6, 0x33, 0xb5, 0x47, 0xe3, 0xa5, 0xb3, 0xf4, 0x7d, 0x3f, 0xe5, 0xf1, 0x4b, 0x90, 0x36, 0xba, 0x58, 0x6f, 0x2c, 0xe7, 0x2d, 0xbe, 0xc3, 0xba, 0xf3, 0x68, 0xee,
0x9d, 0x99, 0x73, 0x18, 0x58, 0x33, 0x5, 0xbf, 0xc7, 0x59, 0x3d, 0x91, 0x51, 0x95, 0x8e, 0xba, 0x6f, 0x51, 0x8e, 0xc4, 0x3a, 0x64, 0xae, 0xfb, 0xd5, 0xa7, 0xad, 0x6f, 0x8c, 0x81, 0x55, 0x9b, 0xbe, 0xb8, 0x82, 0xd3, 0x2a, 0xe9, 0x2f, 0x6f, 0xff, 0x1a, 0xda, 0xbe, 0xfa, 0xac, 0x4a, 0xfb, 0x29, 0x19, 0xe7, 0x10, 0xfa, 0x15, 0xff, 0x9e, 0xbe, 0x4f, 0x69, 0x35, 0x1f, 0x2d, 0xf6, 0xbd, 0xce, 0xab, 0x75, 0xf0, 0xbf, 0x37, 0xa6, 0xb7, 0x92, 0x3e, 0xd3, 0xe, 0xcc, 0x66, 0xbf, 0x22, 0x63, 0x3e, 0xb6, 0xde, 0xbe, 0x1e, 0x5f, 0x6, 0x7b, 0xa5, 0x5f, 0xfd, 0x40, 0x63, 0x8a, 0xcc, 0xfe, 0x73, 0x2f, 0xd9, 0xfd, 0x95, 0xc2, 0x36, 0xe7, 0xfd, 0xe1,
0xf3, 0x7c, 0x76, 0x78, 0x9a, 0xf6, 0x5b, 0xb, 0x9d, 0xb7, 0x4a, 0x9b, 0x32, 0xfa, 0x4c, 0x43, 0x5f, 0x3e, 0x8e, 0x9b, 0x33, 0x5, 0x79, 0x3d, 0x3e, 0x5b, 0x68, 0x77, 0x94, 0x6d, 0x28, 0xe1, 0xd5, 0x44, 0xbe, 0xbf, 0x83, 0xad, 0x4a, 0x8e, 0x2e, 0xb4, 0x7a, 0xd6, 0xd0, 0xa6, 0x3f, 0x14, 0xf6, 0xcf, 0x7c, 0x27, 0xb5, 0x95, 0xb1, 0x60, 0xe0, 0xf9, 0x9b, 0x7, 0x7e, 0xdf, 0xaf, 0x37, 0xb4, 0xbe, 0xf4, 0x68, 0xdb, 0x36, 0xfa, 0xd, 0x16, 0xb3, 0x1e, 0xcf, 0x9d, 0xc6, 0x3b, 0xad, 0xbe, 0xe3, 0x6f, 0x87, 0xad, 0x3a, 0x78, 0x1e, 0xc2, 0x66, 0x6f, 0x74, 0xbb, 0xc6, 0x5a, 0x1a, 0xb6, 0x57, 0xb3, 0x4f, 0x4b, 0xc0, 0xf3, 0x12, 0x74, 0xf3, 0x80, 0x7e, 0xbb, 0x49, 0xdb, 0xd2, 0xf6, 0x7b, 0x34, 0xae, 0xda, 0x9d, 0x30, 0xa6, 0xbc, 0xe4, 0xc2, 0xab, 0xf5, 0xb7, 0xe3, 0x2d, 0x45, 0xfe, 0xd9, 0xb4, 0xd1, 0x13, 0xbf, 0x43, 0xbe, 0xa7, 0x2d, 0x89, 0xab, 0x47, 0xab, 0x33, 0x13, 0xeb, 0x2c, 0xf9, 0x5e, 0x7b, 0x63, 0x2e, 0xe, 0xfe, 0x3e, 0x2f, 0xff, 0x3e, 0x3c, 0xfd, 0x6b, 0x3a, 0x7, 0x46, 0xe7, 0x1c, 0xbb, 0x3a, 0x5b, 0x1d, 0x1e, 0x9d, 0x3, 0xbf, 0xf9, 0x5c, 0x8a, 0x8c, 0xe9, 0xce, 0xa3, 0xcd, 0x36, 0xc8, 0xda, 0x57, 0xbb, 0x12, 0xa7, 0x58, 0x4b, 0x7c, 0xce, 0xb9, 0xba, 0x79, 0xb6, 0xc5, 0xf3, 0xda, 0xfc, 0xc6, 0xfa, 0xf3, 0x58, 0xce, 0x71, 0xfd, 0x7c, 0xce, 0x79, 0x5d, 0x33, 0xf5, 0x56, 0x63, 0xe5, 0x4a, 0xf4, 0x52, 0xd1, 0x3c, 0x6d, 0x6e, 0x2d, 0xe7, 0xee, 0x3c, 0x4d, 0x61, 0x74, 0xa8, 0xad, 0x6d, 0xa5, 0xbe, 0xb2, 0x99, 0x85, 0x86, 0xcf, 0xf9, 0x38, 0x56, 0xf8, 0x61, 0x55, 0xdd, 0xba, 0x77, 0x20, 0x65, 0x62, 0x75, 0xd8, 0x9e, 0xc1, 0xdb, 0x2d, 0xde, 0xd2, 0xe, 0x95, 0xf9, 0xae, 0x6b, 0x2f, 0x44, 0xf3, 0xa0, 0xdb, 0x2d, 0x13, 0xbf, 0xbf, 0x1b, 0x4a, 0x9a, 0xba, 0x7b, 0x7c, 0x2e, 0x3d, 0x2e, 0x3f, 0xd4, 0xd9, 0x97, 0xfb, 0xd9, 0xa5, 0xe9, 0x20, 0xf9, 0x75, 0xd7, 0xb2, 0x22, 0xed, 0x7d, 0xac, 0x63, 0xc7, 0xbb, 0xeb, 0x57, 0x18, 0xd7, 0x74, 0x53, 0xd4, 0xb6, 0xd6, 0x6e, 0x60, 0xa8, 0xd2, 0x18, 0x5f, 0xab, 0xe9, 0xd6, 0xdc, 0x2c, 0xec, 0xc7, 0xb1, 0xca, 0xcf, 0xbe, 0x5c, 0x15, 0xbc, 0x11, 0x98, 0xfd, 0x71, 0x8c, 0x61, 0x5b, 0x73, 0x5a, 0x3d, 0xdd, 0xbd, 0xfd, 0x39, 0xff, 0xd0, 0xfb, 0x87, 0xe, 0x9a, 0x67, 0xeb, 0x1f, 0xcd, 0xce, 0x39, 0x89, 0xd3, 0xfa, 0x75, 0x76, 0x2e, 0xe8, 0x8f, 0xb6, 0xd3, 0xdd, 0xb8, 0x6b, 0xa5, 0x76, 0x90, 0x3c, 0x16, 0x53, 0x6f, 0xae, 0xdc, 0xeb, 0x56, 0x33, 0x79, 0x67, 0xec, 0xce, 0xef, 0xd0, 0x51, 0xf9,
0xca, 0xe7, 0x6a, 0x3b, 0x6e, 0x19, 0xdb, 0x47, 0x75, 0xee, 0xc, 0xac, 0xa9, 0xcd, 0x6c, 0xb5, 0xa1, 0xd8, 0x13, 0x2d, 0x4a, 0x3f, 0x8d, 0xb1, 0x52, 0xf4, 0xd2, 0x86, 0xdf, 0x1f, 0xe6, 0xf5, 0x7, 0xfc, 0xfe, 0x6a, 0xe7, 0xce, 0x73, 0xf9, 0xd5, 0x68, 0xd8, 0xcd, 0x77, 0x53, 0x99, 0xb4, 0x8c, 0xd3, 0x35, 0x30, 0x96, 0x1c, 0xd1, 0x2c, 0x79, 0x5d, 0x47, 0x4f, 0xc3, 0x9d, 0xbf, 0x97, 0x2d, 0x35, 0x35, 0x5b, 0xc3, 0x5a, 0x4, 0x6b, 0x45, 0x9b, 0x2f, 0x19, 0xbd, 0x7d, 0xf6, 0xf3, 0xd9, 0xd8, 0xca, 0xe6, 0xde, 0x13, 0xa5, 0x4d, 0xf4, 0xf5, 0x9c, 0x11, 0x4d, 0x8d, 0x2c, 0x13, 0xec, 0xe9, 0xfb, 0xed, 0xd7, 0xee, 0xfa, 0xb1, 0xf1, 0x77, 0x17,
0x91, 0x96, 0xde, 0x9b, 0xb, 0xa1, 0x5a, 0xcf, 0xfe, 0xfb, 0xed, 0x89, 0xb5, 0x63, 0x58, 0xad, 0xec, 0x62, 0xae, 0x6b, 0x40, 0x67, 0xbc, 0x79, 0x3a, 0xc3, 0xfd, 0xce, 0x16, 0xbf, 0xad, 0xec, 0x5d, 0x55, 0x68, 0x2b, 0xe, 0xda, 0x15, 0x99, 0xd9, 0x1f, 0xc2, 0xc6, 0x9a, 0x4a, 0xae, 0x2a, 0x99, 0x18, 0xb, 0x74, 0xf, 0xb, 0xb7, 0xd, 0xd9, 0x12, 0xba, 0x37, 0x7a, 0x56, 0x64, 0x45, 0x7b, 0xb3, 0x86, 0xc2, 0x56, 0x68, 0x35, 0xd6,
0xfc, 0x4a, 0x1b, 0xab, 0x8a, 0xb5, 0x9f, 0x73, 0xed, 0xcd, 0x54, 0x55, 0x96, 0x4b, 0xf1, 0xa9, 0x4f, 0x64, 0x76, 0x57, 0x7b, 0x66, 0xbe, 0xc4, 0x67, 0x46, 0x35, 0x1f, 0x5e, 0xdc, 0x71, 0xd9, 0x57, 0x5d, 0xeb, 0xa2, 0x1d, 0xcd, 0xe, 0xc5, 0x59, 0xb5, 0x7f, 0x47, 0xb9, 0xde, 0x18, 0x62, 0xfd, 0x8b, 0x47, 0xbb, 0x4d, 0x87, 0x37, 0x45, 0x18, 0xbd, 0xf4, 0x10, 0x6b, 0x17, 0xc6, 0x82, 0x3e, 0x95, 0x6c, 0x9f, 0xd5, 0x1a, 0x79, 0x56, 0x34, 0xff, 0xea, 0xe8, 0x2b, 0x87, 0xe7, 0x82, 0xdb, 0x9e, 0x1c, 0xa1, 0x85, 0xee, 0xc9, 0xa1, 0x5d, 0x15, 0x76, 0x8a, 0xcf, 0xdb, 0xde, 0x3e, 0x9a, 0x7a, 0x7d, 0xbb, 0xfc, 0x90, 0x6, 0x23, 0x2c, 0xbf, 0xe5, 0x15, 0xb9, };
	if (dwBufferCount == 1) {
		
		/*bool hitted = false;
		if (memcmp(lpBuffers->buf, desthead, 4) == 0) {
			hitted = true;
			g_step += 1;
		}

		if (hitted && g_step == 2) {
			TRACE("AfterRecvFilter() pkt2 REPLACED!!!\n");
			memcpy(lpBuffers->buf, pkt2, sizeof(pkt2));
		}

		if (hitted && g_step == 4) {
			TRACE("AfterRecvFilter() pkt4 REPLACED!!!\n");
			memcpy(lpBuffers->buf, pkt4, sizeof(pkt4));
		}

		if (hitted && g_step == 5) {
			TRACE("AfterRecvFilter() pkt5 REPLACED!!!\n");
			memcpy(lpBuffers->buf, pkt5, min(lpBuffers->len, sizeof(pkt5)));
			lpBuffers->buf = (LPSTR)GlobalAlloc(GPTR, sizeof(pkt5));
			lpBuffers->len = sizeof(pkt5);
			memcpy(lpBuffers->buf, pkt5, sizeof(pkt5));
		}*/

		//RecvTest(lpBuffers, lpNumberOfBytesRecvd);

		//if (g_step == 1) { // 初步来看, 包是修改了, 但是可能修改的包不对

		//	unsigned char tbuf[33];
		//	LPCBYTE buf = (LPCBYTE)lpBuffers->buf;
		//	memcpy(tbuf, buf, min(lpBuffers->len, sizeof(tbuf) - 1));
		//	tbuf[sizeof(tbuf) - 1] = 0;
		//	auto str = arrayToHexString(tbuf, sizeof(tbuf));
		//	// TRACE("WSPSend(): Buf = %02x,%02x,%02x,%02x,%02x\n", buf[0], buf[1], buf[2], buf[3], buf[4]);
		//	TRACE("WSPRecv(): BufLen = %d, Buf = %s\n", lpBuffers->len, str.c_str());
		//	TRACE("WSPRecv() Replaced!!!!!\n");

		//	memcpy(lpBuffers->buf, fake_pkt, sizeof(fake_pkt));
		//	g_step = 0;
		//	//if (lpErrno)
		//	//	*lpErrno = NO_ERROR;
		//	//return NO_ERROR;
		//}
	}

	return iNextRetutn;
}

int
WSPAPI WSPRecv(
			   SOCKET s,
			   LPWSABUF lpBuffers,
			   DWORD dwBufferCount,
			   LPDWORD lpNumberOfBytesRecvd,
			   LPDWORD lpFlags,
			   LPWSAOVERLAPPED lpOverlapped,
			   LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine,
			   LPWSATHREADID lpThreadId,
			   LPINT lpErrno
			   )
{
	TRACE("WSPRecv() Enter! dwBufferCount = %d, lpBuffers->len = %d, lpOverlapped = %p, lpCompletionRoutine = %p, Errno = %d\n", 
		dwBufferCount, lpBuffers->len, lpOverlapped, lpCompletionRoutine, *lpErrno);
	
	BOOL cont = TRUE;
	auto result = BeforeRecvFilter(s, lpBuffers, dwBufferCount, lpNumberOfBytesRecvd, lpFlags, lpOverlapped,
		lpCompletionRoutine, lpThreadId, lpErrno, &cont);
	if (!cont) {
		TRACE("WSPRecv(): Leave(%x) Cont == FALSE\n", result);
		return result;
	}

	result = g_NextProcTable.lpWSPRecv(
		s,
		lpBuffers,
		dwBufferCount,
		lpNumberOfBytesRecvd,
		lpFlags,
		lpOverlapped,
		lpCompletionRoutine,
		lpThreadId,
		lpErrno);

	TRACE("WSPRecv(): After Next WSPRecv. lpBuffers->len = %d, lpNumberOfBytesRecvd = %d\n",
		lpBuffers->len, *lpNumberOfBytesRecvd);

	result = AfterRecvFilter(s, lpBuffers, dwBufferCount, lpNumberOfBytesRecvd, lpFlags, lpOverlapped,
		lpCompletionRoutine, lpThreadId, lpErrno, result);

	TRACE("WSPRecv() Leave(%x)\n", result);
	return result;
}

int
WSPAPI WSPRecvDisconnect(
						 SOCKET s,
						 LPWSABUF lpInboundDisconnectData,
						 LPINT lpErrno
						 )
{
	// ODS(L"WSPRecvDisconnect() Enter!\n");
	return g_NextProcTable.lpWSPRecvDisconnect(s, lpInboundDisconnectData, lpErrno);
}

int
WSPAPI WSPRecvFrom(
	SOCKET s,
	LPWSABUF lpBuffers,
	DWORD dwBufferCount,
	LPDWORD lpNumberOfBytesRecvd,
	LPDWORD lpFlags,
	struct sockaddr FAR * lpFrom,
	LPINT lpFromlen,
	LPWSAOVERLAPPED lpOverlapped,
	LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine,
	LPWSATHREADID lpThreadId,
	LPINT lpErrno
	)
{
	// ODS(L"WSPRecvFrom() Enter!\n");
	/*WCHAR temp[1024];
	char *ip = inet_ntoa(((SOCKADDR_IN*)lpFrom)->sin_addr);
	USHORT port = ntohs(((SOCKADDR_IN*)lpFrom)->sin_port);
	_stprintf_s(temp, L"IP is %s, PORT is %d\n", ip, port);*/
	//// ODS(temp);
	return g_NextProcTable.lpWSPRecvFrom(s, lpBuffers, dwBufferCount, lpNumberOfBytesRecvd, lpFlags,
		lpFrom, lpFromlen, lpOverlapped, lpCompletionRoutine, lpThreadId, lpErrno);
}

int
WSPAPI WSPSelect(
				 int nfds,
				 fd_set FAR * readfds,
				 fd_set FAR * writefds,
				 fd_set FAR * exceptfds,
				 const struct timeval FAR * timeout,
				 LPINT lpErrno
				 )
{
	// ODS(L"WSPSelect() Enter!\n");
	return g_NextProcTable.lpWSPSelect(nfds, readfds, writefds,
		exceptfds, timeout, lpErrno);
}

int g_step2 = 0;

int
WSPAPI BeforeSendFilter(
	SOCKET s,
	LPWSABUF lpBuffers,
	DWORD dwBufferCount,
	LPDWORD lpNumberOfBytesSent,
	DWORD dwFlags,
	LPWSAOVERLAPPED lpOverlapped,
	LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine,
	LPWSATHREADID lpThreadId,
	LPINT lpErrno,
	LPBOOL lpCont
)
{
	DumpBuffer("BeforeSendFilter()", s, lpBuffers, 500, TRUE);
	//const int tlen = min(lpBuffers->len, 32);
	//auto str = arrayToHexString((LPBYTE)lpBuffers->buf, tlen);
	//TRACE("BeforeSendFilter(): lpBuffers->buf = [%s]{%s}\n", std::string(lpBuffers->buf, tlen).c_str(), str.c_str());
	//return NO_ERROR;

	
	//LPCBYTE desthead = (LPCBYTE )"#*F^e";
	/*LPCBYTE desthead = (LPCBYTE)"#*<<L<<l<<<<<z";
	size_t headlen = strlen((const char*)desthead);
	LPCBYTE dest = (LPCBYTE)"<<L<<l<<<<<z<>LQ<<<??<UA]MYoQqOsMgMbALV_LgPBmKU_XgGnhmWpi@ToAbM?aEZbMlMsQvUoMmM?MfWraLHBIDROAGU^ijQqarZO<gXoYKMBakPBaKVP`kPcY`VaQoQRqILs]>TcU`XcHpOpicFp`rNRduN@DnOaIiYni>LPydNPE>YSecICA@IBekVQ<lTp]UHPdpGoQqYBaAZa=JIpy@VRyLVQTpPCQhXrQHIoAcJQejR_MKWsUjLrXpHptmGrqFVPuCUbmkOaQ>U?IFXBmiROaINpMfToITFqaiNO=VFqYcIo]AZC\\nQCU@ZA]sWpyJZbMbIRaUVaEjIRA@Xp]fLqatQBATUrE?UoLoO_@kWPeeO`YbWByKRa]]W`QVNpHoW`qGMBe_Hq\\gTQAROAatLRuMPS]jO_=KJPErY_MfUop!";
	size_t destlen = strlen((const char*)dest);*/
	/*BYTE desthead[] = { '#', '*', 'F', '^', 'e' };
	size_t headlen = sizeof(desthead);
	BYTE dest[] = { 0x23, 0x33, 0x46, 0x5e, 0x65, 0x56, 0x50, 0x50, 0x41, 0x4f, 0x51, 0x62, 0x3d, 0x75, 0x4f, 0x51, 0x5d, 0x6c, 0x53, 0x42, 0x6d, 0x51, 0x4c, 0x51, 0x6d, 0x71, 0x51, 0x73, 0x3d, 0x68, 0x58, 0x60, 0x55, 0x6f, 0x51, 0x52, 0x75, 0x45, 0x58, 0x70, 0x71, 0x67, 0x4f, 0x4f, 0x79, 0x5d, 0x4b, 0x71, 0x41, 0x3f, 0x54, 0x50, 0x55, 0x48, 0x50, 0x60, 0x41, 0x41, 0x50, 0x53, 0x45, 0x59, 0x4e, 0x71, 0x65, 0x5c, 0x52, 0x42, 0x79, 0x55, 0x50, 0x60, 0x61, 0x71, 0x50, 0x43, 0x45, 0x61, 0x56, 0x70, 0x55, 0x6c, 0x57, 0x52, 0x55, 0x46, 0x4f, 0x70, 0x51, 0x4b, 0x4f, 0x41, 0x79, 0x40, 0x57, 0x50, 0x65, 0x3c, 0x50, 0x50, 0x61, 0x42, 0x58, 0x6f, 0x6d, 0x67, 0x52, 0x50, 0x3d, 0x45, 0x51, 0x50, 0x61, 0x4d, 0x51, 0x50, 0x59, 0x52, 0x57, 0x63, 0x61, 0x44, 0x4e, 0x41, 0x75, 0x65, 0x58, 0x61, 0x5d, 0x5e, 0x55, 0x50, 0x61, 0x53, 0x50, 0x60, 0x40, 0x7a, 0x4f, 0x42, 0x41, 0x55, 0x55, 0x60, 0x61, 0x4d, 0x50, 0x52, 0x6d, 0x55, 0x58, 0x40, 0x41, 0x70, 0x51, 0x43, 0x45, 0x48, 0x56, 0x71, 0x55, 0x3f, 0x52, 0x52, 0x51, 0x4a, 0x4c, 0x42, 0x41, 0x61, 0x51, 0x51, 0x79, 0x44, 0x58, 0x71, 0x55, 0x4f, 0x51, 0x51, 0x49, 0x51, 0x58, 0x62, 0x71, 0x40, 0x51, 0x43, 0x41, 0x61, 0x4c, 0x41, 0x55, 0x3c, 0x4c, 0x51, 0x79, 0x55, 0x54, 0x63, 0x41, 0x3e, 0x52, 0x60, 0x45, 0x59, 0x58, 0x41, 0x5d, 0x6f, 0x50, 0x51, 0x49, 0x45, 0x4c, 0x63, 0x3d, 0x71, 0x52, 0x51, 0x45, 0x41, 0x56, 0x50, 0x65, 0x4f, 0x53, 0x51, 0x55, 0x49, 0x58, 0x62, 0x61, 0x46, 0x50, 0x51, 0x79, 0x5d, 0x4f, 0x41, 0x41, 0x5d, 0x4b, 0x42, 0x75, 0x4d, 0x58, 0x61, 0x61, 0x68, 0x51, 0x61, 0x45, 0x69, 0x58, 0x60, 0x71, 0x4b, 0x4f, 0x50, 0x79, 0x55, 0x54, 0x61, 0x51, 0x61, 0x4f, 0x72, 0x75, 0x74, 0x58, 0x41, 0x3d, 0x6c, 0x53, 0x42, 0x71, 0x4c, 0x4f, 0x73, 0x3d, 0x75, 0x21, };*/

	BYTE desthead[] = "#*<<<<<<<< <<= LM";
	size_t headlen = sizeof(desthead) - 1;
	BYTE dest[] = "<<<<<<<<<<=LM\\<<<<<><<!";
	if (dwBufferCount == 1) {
		
		//if (g_step2 == 0 && wildcard_memcmp((LPCBYTE)lpBuffers->buf, desthead, headlen) == 0) {
		//	TRACE("BeforeSendFilter(): REPLACED!!!\n")
		//	memcpy(lpBuffers->buf + 2, dest, sizeof(dest));
		//	g_step2 += 1;
		//}

		//if (lpBuffers->len == 40) {
		//	sockaddr_in addr;
		//	int addrlen = sizeof(addr);
		//	if (getpeername(s, (sockaddr*)&addr, &addrlen) == 0) {
		//		DumpBuffer("BeforeSendFilter() Dump2: ", s, lpBuffers, 40);
		//	}
		//}

		/*if (lpBuffers->len == 1 && lpBuffers->buf[0] == '*') {
			lpCont = FALSE;
			return NO_ERROR;
		}*/
		//if (lpBuffers->len >= destlen + 2) {

		//	// TRACE("WSPSend(): Buf = %02x,%02x,%02x,%02x,%02x\n", buf[0], buf[1], buf[2], buf[3], buf[4]);
		//	if (wildcard_memcmp((LPCBYTE)lpBuffers->buf, desthead, headlen) == 0) {

		//		memcpy(lpBuffers->buf + 2, dest, destlen);
		//		if (g_step == 0)
		//			g_step += 1;
		//		// "U\xaaU\xaa9\x9ch\xbd\x01\x008\x00\x00\x00#eFawJ<<<<<=`=hRuR=={=lT_AbQOUNYr]AY`MnVQQkH_@qGsYeLOpy!"
		//		// "U\xaaU\xaa\xbadW\xb3\x01\x008\x00\x00\x00#O]qvg[{{{{y`=\RRkwdrnLVBQLQbUKPBPsPNynVQakR`q@QoQNUopy!"
		//		TRACE("WSPSend(): discard!!!!!!!!!!!!!!!!!!!!\n");
		//		//TRACE("WSPSend(): Leave \n");
		//		//if (lpNumberOfBytesSent)
		//		//	*lpNumberOfBytesSent = lpBuffers->len;
		//		//if (lpErrno)
		//		//	*lpErrno = NO_ERROR;
		//		//return NO_ERROR;
		//	}
		//}
	}

	return NO_ERROR;
}

int
WSPAPI AfterSendFilter(
	SOCKET s,
	LPWSABUF lpBuffers,
	DWORD dwBufferCount,
	LPDWORD lpNumberOfBytesSent,
	DWORD dwFlags,
	LPWSAOVERLAPPED lpOverlapped,
	LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine,
	LPWSATHREADID lpThreadId,
	LPINT lpErrno,
	int nResult
)
{	
	/*LPCSTR dest = "#5<L<<<<<<<<<mYL@<Bl<=<<LO]=M@@mLPQBM@UAM`Q=M@U?M`A=MPU=LO==MP@uLPIBM@A@LPA=M@A?LPE=LPU>LPE=M@UAM`IBMPA=M`A=J<!";
	if (dwBufferCount == 1 && lpBuffers->len == strlen(dest)) {
		nResult = g_NextProcTable.lpWSPSend(s, lpBuffers, dwBufferCount, lpNumberOfBytesSent,
			dwFlags, lpOverlapped, lpCompletionRoutine, lpThreadId, lpErrno);
	}*/

	return nResult;
}

// TODO: 修改发送接收函数, 打印出精准可比较的LOG
// 从LOG输入来看, 可能同时进入, 所以必须支持多线程
int
WSPAPI WSPSend(
			   SOCKET s,
			   LPWSABUF lpBuffers,
			   DWORD dwBufferCount,
			   LPDWORD lpNumberOfBytesSent,
			   DWORD dwFlags,
			   LPWSAOVERLAPPED lpOverlapped,
			   LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine,
			   LPWSATHREADID lpThreadId,
			   LPINT lpErrno
			   )
{
	TRACE("WSPSend() Enter! dwBufferCount = %d, lpBuffers->len = %d, lpOverlapped = %p, lpCompletionRoutine = %p, Errno = %d\n",
		dwBufferCount, lpBuffers->len, lpOverlapped, lpCompletionRoutine, *lpErrno);
	BOOL cont = TRUE;

	auto result = BeforeSendFilter(s, lpBuffers, dwBufferCount, lpNumberOfBytesSent, dwFlags, 
		lpOverlapped, lpCompletionRoutine, lpThreadId, lpErrno, &cont);
	if (!cont) {
		TRACE("WSPSend(): Leave(%x) Cont == FALSE\n", result);
		return result;
	}

	result = g_NextProcTable.lpWSPSend(s, lpBuffers, dwBufferCount, lpNumberOfBytesSent,
		dwFlags, lpOverlapped, lpCompletionRoutine, lpThreadId, lpErrno);

	result = AfterSendFilter(s, lpBuffers, dwBufferCount, lpNumberOfBytesSent, dwFlags,
		lpOverlapped, lpCompletionRoutine, lpThreadId, lpErrno, result);

	TRACE("WSPSend(): Leave(%x)\n", result);
	return result;
}

int
WSPAPI WSPSendDisconnect(
						 SOCKET s,
						 LPWSABUF lpOutboundDisconnectData,
						 LPINT lpErrno
						 )
{
	// ODS(L"WSPSendDisconnect() Enter!\n");
	return g_NextProcTable.lpWSPSendDisconnect(s, lpOutboundDisconnectData, lpErrno);
}

int WSPAPI WSPSendTo(
		SOCKET    s,
		LPWSABUF   lpBuffers,
		DWORD    dwBufferCount,
		LPDWORD    lpNumberOfBytesSent,
		DWORD    dwFlags,
		const struct sockaddr FAR * lpTo,
		int     iTolen,
		LPWSAOVERLAPPED lpOverlapped,
		LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine,
		LPWSATHREADID lpThreadId,
		LPINT    lpErrno )
{
	// ODS(L"SendTo() Enter\n");
	/*sockaddr_in *sa = (sockaddr_in *)lpTo;
	strcpy_s(NowIP,inet_ntoa(sa->sin_addr));
	nowPort = ntohs(sa->sin_port);
	GetInformation();
	if (!lanjie)
	{
		return g_NextProcTable.lpWSPSendTo(s, lpBuffers, dwBufferCount, lpNumberOfBytesSent, dwFlags, lpTo,
			iTolen, lpOverlapped, lpCompletionRoutine, lpThreadId, lpErrno);
	}
	((sockaddr_in*)lpTo)->sin_addr.S_un.S_addr = inet_addr(ChangedIP);
	((sockaddr_in*)lpTo)->sin_port = htons(ChangedPort);*/
	return g_NextProcTable.lpWSPSendTo(s, lpBuffers, dwBufferCount, lpNumberOfBytesSent, dwFlags, lpTo,
		iTolen, lpOverlapped, lpCompletionRoutine, lpThreadId, lpErrno);
}

int
WSPAPI WSPSetSockOpt(
					 SOCKET s,
					 int level,
					 int optname,
					 const char FAR * optval,
					 int optlen,
					 LPINT lpErrno
					 )
{
	// ODS(L"WSPSetSockOpt() Enter\n");
	return g_NextProcTable.lpWSPSetSockOpt(s, level, optname, optval, optlen, lpErrno);
}

int
WSPAPI WSPShutdown(
				   SOCKET s,
				   int how,
				   LPINT lpErrno
				   )
{
	// ODS(L"WSPSetSockOpt Enter\n");
	return g_NextProcTable.lpWSPShutdown(s, how, lpErrno);
}

SOCKET
WSPAPI WSPSocket(
				 int af,
				 int type,
				 int protocol,
				 LPWSAPROTOCOL_INFOW lpProtocolInfo,
				 GROUP g,
				 DWORD dwFlags,
				 LPINT lpErrno
				 )
{
	// ODS(L"WSPSocket(): Enter");
	//// ODS1(L"WSPSocket(): Enter. g_NextProcTable = %p\n", &g_NextProcTable);
	//// ODS1(L"WSPSocket(): g_NextProcTable.lpWSPSocket = %p\n", g_NextProcTable.lpWSPSocket);
	auto result = g_NextProcTable.lpWSPSocket(af, type, protocol,
		lpProtocolInfo, g, dwFlags, lpErrno);
	// ODS(L"WSPSocket() Leave");
	return result;
}

INT
WSPAPI WSPStringToAddress(
						  LPWSTR AddressString,
						  INT AddressFamily,
						  LPWSAPROTOCOL_INFOW lpProtocolInfo,
						  LPSOCKADDR lpAddress,
						  LPINT lpAddressLength,
						  LPINT lpErrno
						  )
{
	// ODS(L"WSPStringToAddress() Enter");
	return g_NextProcTable.lpWSPStringToAddress(AddressString, AddressFamily, 
		lpProtocolInfo, lpAddress, lpAddressLength, lpErrno);
}
